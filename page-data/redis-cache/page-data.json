{"componentChunkName":"component---src-templates-post-tsx","path":"/redis-cache/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"무엇을-캐싱했을까\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%EC%97%87%EC%9D%84-%EC%BA%90%EC%8B%B1%ED%96%88%EC%9D%84%EA%B9%8C\" aria-label=\"무엇을 캐싱했을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무엇을 캐싱했을까?</h2>\n<p><a href=\"https://github.com/woowacourse-teams/2021-botobo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">보고 또 보고</a> 에서는 문제집 검색 기능을 제공한다.<br>\n검색 기능이 고도화되면서 키워드로 검색된 문제집 결과에 유저, 태그로 필터해주는 기능도 추가되었다.<br>\n이렇게만 들었을 때는 '검색된 문제집들의 유저와 태그 리스트가 있을테니 이를 사용하면 되겠다!' 싶겠지만 그렇게 간단하지만은 않았다.<br>\n그 이유는 페이징 처리때문이었다.</p>\n<p>문제집 검색은 문제집 이름 중 키워드가 포함되어 있는 문제집 20개씩 페이징 처리를 해서 보여준다.<br>\n하지만 필터를 위해서 필요한 태그와 유저 리스트는 키워드에 해당하는 문제집 전체의 태그와 유저 리스트였다.<br>\n즉, 필요한 유저와 태그 리스트는 페이징 처리로 인해 매번 데이터를 추가해야 하는 것이 아닌 고정되어 있어야 했다.</p>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/62014888/147463724-b5480561-9108-426f-bc80-59f6ae9d9226.jpg\"></p>\n<p>그렇게 하기 위해서 결국 우리가 생각했던 방식은 새롭게 유저 및 태그 리스트를 불러오는 api를 만들고 이를 이용하는 것이었다.<br>\n마음에 들지 않았지만 현재 상황에서는 이 방법이 최선이라고 생각했고 결과적으로 해당 기능은 무사히 구현하게 되었다.</p>\n<p><strong>하지만</strong> 문제는 매번 검색을 할 때마다 키워드에 해당하는 문제집 리스트만 I/O 작업을 통해 DB에서 들고 오는 것이 아니라 유저와 태그 리스트도 DB에서 들고와야 했다.<br>\n즉, 문제집 조회 기능을 위해서 매번 유저, 태그 리스트 조회를 위해 쿼리가 추가적으로 나가야 했다.</p>\n<ul>\n<li>문제집 조회 쿼리</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/62014888/147400960-8d939d92-0746-4a92-a7e1-315ba53d4788.png\"></p>\n<ul>\n<li>태그 조회 쿼리</li>\n</ul>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/62014888/147873743-57198f9f-1664-474c-8127-4393b49759e0.png\"></p>\n<p>동일한 키워드를 계속해서 검색할 때마다 유저, 태그 리스트를 조회하는 쿼리가 나가는 것은 매번 I/O 작업을 하는 것이라 속도가 느리고 성능상 좋지 않을 것이라고 판단했고 이를 위해 캐싱을 적용해야겠다고 생각하게 되었다.<br>\n그리고 때마침 인기 검색어와 인기 문제집을 위해서 Redis를 사용하고 있었고 <code class=\"language-text\">WAS별로 캐시 공유</code> 및 <code class=\"language-text\">TTL 설정</code>을 위해 저장소로 Redis를 사용하기로 했다!</p>\n<ul>\n<li>\n<p>그렇다면 Memcached는?</p>\n<ul>\n<li>캐싱을 위한 저장소로 Memcached도 있는 것으로 알고 있다.</li>\n<li>두 개 다 메모리에 데이터를 저장하여 캐싱 기능으로 사용하기 좋고 편리하다고 할 수 있지만 팀에서 이미 '인기 검색어'와 '인기 문제집' 기능을 위해 Redis를 사용하고 있었다</li>\n<li>특히, 인기 검색어는 sorted set이라는 자료구조를 활용하여 랭킹 처리를 하고 있었기에 Redis 사용이 확실했다.</li>\n<li>정리하자면 Redis에서 제공해주는 다양한 자료구조, 기존에 사용하던 Redis를 그대로 사용함으로써 관리 포인트를 줄이기 위해 Redis를 사용했다고 볼 수 있다. (물론 문서가 다양하다는 장점도 있다ㅎㅎ)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"왜-캐싱을-하면-빠를까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%BA%90%EC%8B%B1%EC%9D%84-%ED%95%98%EB%A9%B4-%EB%B9%A0%EB%A5%BC%EA%B9%8C\" aria-label=\"왜 캐싱을 하면 빠를까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 캐싱을 하면 빠를까?</h2>\n<p>왜 캐싱을 하면 빠를까?<br>\n조금 더 구체적으로 말하면 '왜 In-Memory가 Disk I/O보다 빠를까?'라고 말할 수 있다.</p>\n<p align=\"center\"><img width=\"70%\" src=\"https://user-images.githubusercontent.com/62014888/147469334-aa69b436-263c-43c9-a3ef-8f71facdf8c6.png\"></p>\n<p>메모리 계층 구조를 보게 되면 위에서 아래로 갈수록 CPU 접근 속도가 느려진다.<br>\nCPU는 레지스터, 캐시, 메인 메모리는 직접적인 접근이 가능하나 하드 디스크의 경우 직접 접근할 방법이 없다.<br>\n그래서 하드 디스크의 데이터를 메모리로 이동시키고, 메모리에서 접근해야 한다.</p>\n<p>그러다보니 당연히 메인 메모리에 데이터를 저장하는 In-Memory DB가 하드 디스크에 저장하는 Disk-Based DB보다 빠른 것이다.</p>\n<br/>\n<h2 id=\"캐싱-전략-및-적용해보기\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%B1-%EC%A0%84%EB%9E%B5-%EB%B0%8F-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"캐싱 전략 및 적용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐싱 전략 및 적용해보기</h2>\n<p>캐싱 전략으로 두 가지 정도 짚고 넘어볼 수 있다.</p>\n<h3 id=\"1-look-aside--lazy-loading\" style=\"position:relative;\"><a href=\"#1-look-aside--lazy-loading\" aria-label=\"1 look aside  lazy loading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Look Aside (= Lazy Loading)</h3>\n<p>이름 그대로 캐시를 옆에 두고 필요할 때만 데이터를 캐시에 로드하는 캐싱 전략이다. 캐시는 데이터베이스와 애플리케이션 사이에 위치하여 단순 key-value 형태를 저장한다.\n애플리케이션에서 데이터를 가져올 때 Redis에 항상 먼저 요청하고, 데이터가 캐시에 있을 때에는 Redis에서 데이터를 반환한다.\n만약 데이터가 캐시에 없을 경우 데이터베이스에 데이터를 요청하고, 애플리케이션은 이 데이터를 다시 Redis에 저장한다.</p>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>실제로 사용되는 데이터만 캐시할 수 있다.</li>\n<li>Redis의 장애가 애플리케이션에 치명적인 영향을 주지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>캐시에 없는 데이터를 조회할 때는 캐시에서 데이터에 대한 초기 요청, 데이터베이스 쿼리, 캐시에 데이터 쓰기와 같은 과정이 발생해 오랜 시간이 걸릴 수 있다.</li>\n<li>\n<p>캐시가 최신 데이터를 가지고 있다는 것을 보장하지 못한다. 데이터베이스에서 데이터가 변경될 때 캐시에 대한 업데이트가 없기 때문에 발생한다.</p>\n<ul>\n<li>Write Through 전략을 택하거나 TTL(Time To Live) 설정을 통해 해결할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"2-write-through\" style=\"position:relative;\"><a href=\"#2-write-through\" aria-label=\"2 write through permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Write Through</h3>\n<p>데이터베이스에 데이터를 작성할 때마다 캐시에 데이터를 추가하거나 업데이트한다.</p>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>캐시의 데이터는 항상 최신 상태로 유지할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>데이터 입력시 두번의 과정을 거쳐야 하기 때문에 지연 시간이 증가한다.</li>\n<li>\n<p>사용되지 않을 수도 있는 데이터도 일단 캐시에 저장하기 때문에 리소스 낭비가 발생한다.</p>\n<ul>\n<li>TTL 설정으로 해결할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"보또보에서는\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%98%90%EB%B3%B4%EC%97%90%EC%84%9C%EB%8A%94\" aria-label=\"보또보에서는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보또보에서는?</h3>\n<p>캐싱에 사용되는 key는 검색 키워드고 value는 태그 리스트였다.<br>\n당시에는 이정도까지 전략에 대해 깊은 고민을 하지 않았다. (용어도 잘 몰랐다)<br>\n그렇기에 검색할 때 캐시 데이터가 존재하면 그 데이터를 반환하고 아니면 새로 DB에서 조회하고 캐싱하면 되겠다 싶어서 Look Aside 전략을 택했다.<br>\n최신 데이터가 아닌 점은 해당 데이터가 짧은 시간동안 정합성이 어긋나도 사용자 입장에서 서비스를 이용하는데 크게 영향을 끼칠 데이터가 아니므로 괜찮다고 생각했기에 TTL 설정을 통해 해결하고자 했다.</p>\n<p>TTL의 경우 현재 10분으로 설정되어 있지만... 아무리 캐싱으로 성능을 높이고 태그라는 데이터가 미치는 영향이 엄청 크지 않다고 해도 10분간 데이터 정합성이 어긋나는건 조금 아닌거 같다는 생각이 든다.<br>\n추후에 변경을 해야겠다.</p>\n<br/>\n<h3 id=\"적용-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%EC%BD%94%EB%93%9C\" aria-label=\"적용 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 코드</h3>\n<p>본 코드는 프로젝트에서 사용한 코드 일부를 가져온 것이다.<br>\n필자가 구현한 부분은 Redis를 사용한 캐싱이었으므로 코드 또한 캐싱 관련 설정 및 구현 코드다.<br>\n이외에도 RedisTemplate, StringRedisTemplate 등을 사용하여 다른 팀원들이 구현한 리프레시 토큰을 저장한다던가 랭킹 기능 부분도 존재하지만 그 부분은 추후에 다뤄보겠다. </p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Redis</span>\n    implementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-data-redis'</span>\n    implementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-cache'</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cache를 사용하고 저장소로 Redis를 사용하기 위해 위와 같은 의존성을 추가했다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> redis 서버 ip 주소\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span> <span class=\"token comment\"># redis 기본포트는 6379다</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RedisProperties</span> redisProperties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisProperties</span> redisProperties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redisProperties <span class=\"token operator\">=</span> redisProperties<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 1</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisConnectionFactory</span> <span class=\"token function\">redisConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RedisStandaloneConfiguration</span> redisStandaloneConfiguration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisStandaloneConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisStandaloneConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setHostName</span><span class=\"token punctuation\">(</span>redisProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisStandaloneConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span>redisProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LettuceConnectionFactory</span><span class=\"token punctuation\">(</span>redisStandaloneConfiguration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Redis 설정 클래스와 Cache 설정 클래스를 따로 나누었다.  </p>\n<ol>\n<li>yml에 설정한 Redis 정보를 이용해 RedisConnectionFactory 인터페이스 구현체를 만들어서 반환한다.<br>\nRedisConnectionFactory는 Redis에 접근을 도와주는 인터페이스로 구체적으로 Redis 연결에 사용되는 RedisConnection을 생성한다.<br>\n이때 구현체인 Client로 Java는 크게 Jedis, Lettuce 크게 2가지를 지원해준다.<br>\n2개 중에 Lettuce를 택하게 되었는데 그 이유는<br>\nLettuce는 Netty 기반 Reids Client로 비동기 방식으로 요청을 처리해주므로 성능이 좋고 무엇보다 Spring-data-redis에서 제공해주는 기본 Client이므로 따로 의존성을 추가할 필요가 없기 때문에 간편하게 사용할 수 있기 때문이다.<br>\n성능과 관련한 글은 <a href=\"https://jojoldu.tistory.com/418\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이동욱님의 글</a> 을 참고하길 바란다.</li>\n</ol>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 1</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableCaching</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redisConnectionFactory <span class=\"token operator\">=</span> redisConnectionFactory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 3</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheManager</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">RedisCacheManager</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RedisCacheManagerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">cacheDefaults</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaultConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withInitialCacheConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token function\">cacheConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 4</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">cacheConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"filterTags\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">durationConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 5</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisCacheConfiguration</span> <span class=\"token function\">defaultConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">disableCachingNullValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">serializeValuesWith</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token class-name\">RedisSerializationContext</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>\n                                <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 6</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisCacheConfiguration</span> <span class=\"token function\">durationConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>캐싱 설정 관련 클래스다.  </p>\n<ol>\n<li>@EnableCaching은 내부적으로 Spring AOP를 이용하여 애노테이션 기반 캐싱 설정을 사용하게 해준다.</li>\n<li>현재 코드에는 없지만 프로젝트에서 CacheManager를 2개를 빈으로 등록해두고 사용한다.<br>\nRedisCacheManager와 ConcurrentMapCacheManager인데 이러한 Multiple CacheManager 사용을 위해서는 @Primary를 사용해 우선적으로 등록을 시켜줄 CacheManager를 정해주거나\nCacheConfigurerSupport를 상속하여 구현하면 된다.</li>\n<li>빈으로 등록된 RedisConnectionFactory를 사용하는 RedisCacheManager를 만드는데 이때 cacheDefaults와 withInitialCacheConfigurations를 설정했다.<br>\n기본적으로 withInitialCacheConfigurations에서 관리되는 cacheName 인지 먼저 보고 없으면 cacheDefaults를 사용한다고 한다.<br>\n참고로 현재 cacheDefaults에 설정된 RedisCacheConfiguration은 리프레시 토큰 관련 설정이다.</li>\n<li>cacheName 별로 RedisCacheConfiguration을 가지고 있는 Map을 반환한다. 코드에는 filterTags 밖에 없지만 실제로는 다른 설정도 등록되어 있다.</li>\n<li>리프레시 토큰 관련 설정으로 TTL은 7일 직렬화 옵션으로 GenericJackson2JsonRedisSerializer를 사용했다.</li>\n<li>태그 캐시 설정으로 TTL을 10분으로 설정했다.</li>\n</ol>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TagService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TagRepository</span> tagRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TagSearchRepository</span> tagSearchRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TagService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TagRepository</span> tagRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TagSearchRepository</span> tagSearchRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagRepository <span class=\"token operator\">=</span> tagRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagSearchRepository <span class=\"token operator\">=</span> tagSearchRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"filterTags\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"#filterCriteria.workbook\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TagResponse</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllTagsByWorkbookName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterCriteria</span> filterCriteria<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> keyword <span class=\"token operator\">=</span> filterCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">getWorkbook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">TagResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tags</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> findTags <span class=\"token operator\">=</span> tagSearchRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByContainsWorkbookName</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TagResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tags</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>findTags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 TagService에서 캐시 애노테이션을 사용한 코드다.</p>\n<p>저장하는 key는 검색 키워드, value는 TagResponse List로 설정하였다.<br>\n먼저 Redis에 key가 존재하는지 확인하고 존재하면 바로 해당 value를 이용해 응답을 보내주고\n존재하지 않으면 DB에 요청을 해서 태그 리스트를 조회하고 TagResponse로 변환한 뒤 응답을 보내주었다.</p>\n<br/>\n<h2 id=\"성능-측정\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95\" aria-label=\"성능 측정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 측정</h2>\n<p>성능 테스트를 위해 테스트 서버를 구축하고 데이터베이스에 문제집 100만, 태그 만 개 정도를 넣어두고 테스트를 진행해봤다.<br>\n하지만, 아쉽게도 쿼리가 문제가 있었는지 데이터가 많을 때는 테스트를 하기 힘들 정도로 조회 속도가 느렸다.</p>\n<p>추후에 쿼리 튜닝을 해야겠다는 생각을 하고 일단 개발 서버에 존재하던 데이터로만 테스트를 진행했다.<br>\n테스트 도구로 k6를 사용했고 VUSER는 100으로 설정했다.<br>\n100으로 설정한 이유는 1명당 1일 평균 요청 수를 피크시간 대에 60~70이라고 잡고 태그 조회 api의 요청 수는 1이고 지연시간이 0.5라고 가정했을 때<br>\n(60*1.5)/1 = 90이고 (70*1.5)/1 = 105 니까 어림잡아 100으로 설정하게 되었다.</p>\n<ul>\n<li>\n<p>캐싱 전</p>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/62014888/147479729-bde97d19-eb7d-4423-a3da-e137176756f2.png\"></p>\n</li>\n<li>\n<p>캐싱 후</p>\n<p align=\"center\"><img width=\"80%\" src=\"https://user-images.githubusercontent.com/62014888/147479767-bd8086cb-c1b7-46e0-a081-ad7261b31507.png\"></p>\n</li>\n</ul>\n<p>측정 결과 요청 응답 시간이 평균 2.72sec에서 587ms로 줄어든 것을 볼 수 있었다.</p>\n<br/>\n<h2 id=\"아쉬운-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬운 점</h2>\n<ol>\n<li>성능테스트를 조금 더 깊게 해볼껄 이라는 아쉬움이 들었다.<br>\n앞서 말했듯 대량의 데이터를 이용해 측정을 하지 못했고 단순하게 k6만 돌려놓기만 하고 해당 서버에서 vmstat을 사용해 시스템 모니터링을 하지 못했다.<br>\nk6 설정도 조금 아쉬웠다. 테스트 시간을 더 길게 잡고 해봤어야 했는데..</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>다른 크루에게 '왜 검색 결과에 해당하는 문제집 리스트를 캐싱하지 않았어?' 라는 질문을 들었던 적이 있었다.<br>\n당시에는 문제집 결과를 캐싱할 생각을 못했다.<br>\n아마 api가 여러번 나가게 된다는 것에 초점을 뒀고 문제집은 페이징 처리가 되어있다보니 힘들다고 예상해서 제외를 했던 것 같다.<br>\n하지만 지금 생각해보니 페이징 처리가 되어있다고 해도 캐싱은 충분히 해줄 수 있을 것 같았다.<br>\n그렇다면 데이터 정합성과 관련해서 캐싱 전략을 세우고 적절한 트레이드 오프를 찾는다면 문제집 결과를 캐싱하는 것이 성능을 더 향상시킬 수 있지 않을까? 라는 생각이 든다.</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>면접에서 받았던 질문으로 '키워드에 해당하는 문제집이 추가가 되었을 때 태그 리스트도 변경이 될 수 있는데 이 부분은 어떻게 생각하냐?' 가 있는데<br>\n당시에 'TTL을 1분(인줄 알았는데 10분이었다)으로 설정했고 해당 데이터가 짧은 시간동안 정합성이 어긋나도 사용자 입장에서 서비스를 이용하는데 크게 영향을 끼칠 데이터가 아니므로 괜찮다고 생각한다. 그리고 키워드에 해당하는 문제집이 추가되었을 때 저장되어있던 캐시를 비워주는 방법도 생각하고 있다. 어쩌고 저쩌고~'<br>\n이런 느낌으로 대답을 했었는데 돌아온 질문이 '어떻게 문제집을 추가할 때 키워드와 관련된 캐시를 삭제할 수 있냐?' 였고 그럼 캐시 전부를 비우는 방법도 있겠는데 그 부분은 조금 더 생각해봐야겠다고 답변했던 경험이 있다.<br>\n끝나고 나서도 지금까지 드는 고민은 어떻게 할 수 있을까? 였다.<br>\n결국 트레이드 오프라고 생각하고 받아들여야 하는건가 아님 전략을 바꿔 문제를 해결해야 하는건가 계속 고민 중이다.</li>\n</ol>\n<br/>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<ul>\n<li>캐싱과 Redis에 대해 공부하게 된 좋은 시간이었다.</li>\n<li>과연 현재 캐싱한 데이터가 정말로 캐싱하기 적합한 데이터였을까? 하고 생각하면 자신있게 대답은 하기 힘들 것 같다.\n하지만 당시에는 이 방법이 최선이었다고 생각한다..ㅎㅎ</li>\n<li>항상 캐싱을 할땐 데이터 정합성을 생각하며 팀 차원에서 적절한 전략을 세우도록 하자.</li>\n</ul>\n<br/>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://meetup.toast.com/posts/225\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://meetup.toast.com/posts/225</a></li>\n<li><a href=\"https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Strategies.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Strategies.html</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EA%B3%84%EC%B8%B5_%EA%B5%AC%EC%A1%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/메모리_계층_구조</a></li>\n<li><a href=\"https://www.baeldung.com/spring-multiple-cache-managers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/spring-multiple-cache-managers</a></li>\n<li><a href=\"https://velog.io/@bonjugi/RedisCacheManager-TTL-Serializer-%EB%A5%BC-%EC%BA%90%EC%8B%9C%EC%9D%B4%EB%A6%84%EB%B3%84%EB%A1%9C-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@bonjugi/RedisCacheManager-TTL-Serializer-%EB%A5%BC-%EC%BA%90%EC%8B%9C%EC%9D%B4%EB%A6%84%EB%B3%84%EB%A1%9C-%EB%8B%A4%EB%A5%B4%EA%B2%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0</a></li>\n<li><a href=\"https://jojoldu.tistory.com/418\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jojoldu.tistory.com/418</a></li>\n<li><a href=\"https://github.com/binghe819/TIL/blob/master/Spring/Redis/spring%EC%9C%BC%EB%A1%9C%20redis%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0%20%EC%A0%84%EC%97%90%20%EB%B3%B4%EB%A9%B4%20%EC%A2%8B%EC%9D%80%20%ED%81%B0%20%EA%B7%B8%EB%A6%BC/spring%EC%9C%BC%EB%A1%9C%20redis%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0%20%EC%A0%84%EC%97%90%20%EB%B3%B4%EB%A9%B4%20%EC%A2%8B%EC%9D%80%20%ED%81%B0%20%EA%B7%B8%EB%A6%BC.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/binghe819/TIL/blob/master/Spring/Redis/spring%EC%9C%BC%EB%A1%9C%20redis%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0%20%EC%A0%84%EC%97%90%20%EB%B3%B4%EB%A9%B4%20%EC%A2%8B%EC%9D%80%20%ED%81%B0%20%EA%B7%B8%EB%A6%BC/spring%EC%9C%BC%EB%A1%9C%20redis%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0%20%EC%A0%84%EC%97%90%20%EB%B3%B4%EB%A9%B4%20%EC%A2%8B%EC%9D%80%20%ED%81%B0%20%EA%B7%B8%EB%A6%BC.md</a></li>\n</ul>","excerpt":"무엇을 캐싱했을까? 보고 또 보고 에서는 문제집 검색 기능을 제공한다. 검색 기능이 고도화되면서 키워드로 검색된 문제집 결과에 유저, 태그로 필터해주는 기능도 추가되었다. 이렇게만 들었을 때는 '검색된 문제집들의 유저와 태그 리스트가 있을테니 이를 …","tableOfContents":"<ul>\n<li><a href=\"/redis-cache/#%EB%AC%B4%EC%97%87%EC%9D%84-%EC%BA%90%EC%8B%B1%ED%96%88%EC%9D%84%EA%B9%8C\">무엇을 캐싱했을까?</a></li>\n<li><a href=\"/redis-cache/#%EC%99%9C-%EC%BA%90%EC%8B%B1%EC%9D%84-%ED%95%98%EB%A9%B4-%EB%B9%A0%EB%A5%BC%EA%B9%8C\">왜 캐싱을 하면 빠를까?</a></li>\n<li>\n<p><a href=\"/redis-cache/#%EC%BA%90%EC%8B%B1-%EC%A0%84%EB%9E%B5-%EB%B0%8F-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">캐싱 전략 및 적용해보기</a></p>\n<ul>\n<li><a href=\"/redis-cache/#1-look-aside--lazy-loading\">1) Look Aside (= Lazy Loading)</a></li>\n<li><a href=\"/redis-cache/#2-write-through\">2) Write Through</a></li>\n<li><a href=\"/redis-cache/#%EB%B3%B4%EB%98%90%EB%B3%B4%EC%97%90%EC%84%9C%EB%8A%94\">보또보에서는?</a></li>\n<li><a href=\"/redis-cache/#%EC%A0%81%EC%9A%A9-%EC%BD%94%EB%93%9C\">적용 코드</a></li>\n</ul>\n</li>\n<li><a href=\"/redis-cache/#%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95\">성능 측정</a></li>\n<li><a href=\"/redis-cache/#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\">아쉬운 점</a></li>\n<li><a href=\"/redis-cache/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"/redis-cache/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/redis-cache/"},"frontmatter":{"title":"프로젝트에서 캐싱을 통해 성능 개선하기","date":"Dec 04, 2021","tags":["redis","cache"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/redis-cache/","series":[],"lastmod":"2021-12-04"}},"staticQueryHashes":["2027115977","694178885"]}