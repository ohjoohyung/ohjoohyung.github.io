{"componentChunkName":"component---src-templates-post-tsx","path":"/effective-java-item6/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>\n<p>똑같은 기능의 객체를 매번 생성하기보다는 객체 하나를 재사용하는 편이 나을 때가 많다.</p>\n<ul>\n<li>재사용은 빠르고 세련됨.</li>\n<li>특히 불변 객체는 언제든 재사용할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bikini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 따라 하지 말 것</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"bikini\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>첫번째 코드는 String 인스턴스를 새로 만들게 되어 생성자에 넘겨진 \"bikini\" 자체가 이 생성자로 만들어내려는 String과 기능적으로 완전히 똑같다.</p>\n<ul>\n<li>반복문이나 빈번히 호출되는 메서드 안에 있다면 쓸데없는 String 인스턴스가 수백만 개 만들어질 수도 있다.</li>\n</ul>\n</li>\n<li>\n<p>두번째 코드는 새로운 인스턴스를 매번 만드는 대신 하나의 String 인스턴스를 사용한다.</p>\n<ul>\n<li>같은 가상 머신 안에서 이와 똑같은 문자열 리터럴을 사용하는 모든 코드가 같은 객체를 재사용함이 보장됨. (상수 풀 사용)</li>\n</ul>\n</li>\n<li>\n<p>생성자 대신 정적 팩터리 메서드를 제공하는 불변 클래스에서는 정적 팩터리 메서드를 사용해 불필요한 객체 생성을 피할 수 있다.</p>\n<ul>\n<li>Boolean(String) 생성자 대신 Boolean.valueOf(String) 팩터리 메서드를 사용하는 것이 좋다. (그래서 이 생성자는 자바 9에서 deprecated 되었다)</li>\n</ul>\n</li>\n<li>\n<p>생성 비용이 아주 비싼 객체도 있다.</p>\n<ul>\n<li>이런 객체는 반복해서 필요하다면 캐싱하여 재사용하길 권함.</li>\n<li>\n<p>대표적인 예로 String의 matches 메서드가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRomanNumeralSlow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^(?=.)M*(C[MD]|D?C{0,3})\"</span>\n              <span class=\"token operator\">+</span> <span class=\"token string\">\"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>String.matches는 정규표현식으로 문자열 형태를 확인하는 가장 쉬운 방법이지만, 성능이 중요한 상황에서 반복해 사용하기엔 적합하지 않음.</li>\n<li>\n<p>메서드 내부에서 정규표현식용 Pattern 인스턴스를 만드는데 Patten은 입력받은 정규표현식에 해당하는 유한 상태 머신(finite state machine)을 만들기 때문에 인스턴스 생성 비용이 높음.</p>\n<ul>\n<li>유한 상태 머신이란 한번에 하나의 상태를 가지며 특정 이벤트에 의해 한 상태에서 다른 상태로 전이할 수 있는 기계라고 하는데 정규표현식은 이러한 유한 상태 머신을 이용해서 구현된다고 한다.</li>\n<li>모든 상태와 전이를 찾아놓고 매칭을 하기에 생성 비용이 높다고 한다.</li>\n</ul>\n</li>\n<li>성능 개선을 위해 정규표현식을 표현하는 (불변인) Pattern 인스턴스를 클래스 초기화(정적 초기화) 과정에서 직접 생성해 캐싱해두고, 나중에 isRomanNumeral 메서드가 호출될 때마다 이 인스턴스를 재사용함.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RomanNumerals</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> ROMAN <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"^(?=.)M*(C[MD]|D?C{0,3})\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRomanNumeralFast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ROMAN<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>ROMAN 필드를 메서드가 처음 호출될 때 필드를 초기화할 수 있게 지연 초기화를 사용할 순 있지만 권하지는 않는다.</p>\n<ul>\n<li>코드가 복잡해지고 성능은 크게 개선되지 않을 때가 많기 때문.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>객체가 불변이라면 재사용해도 안전함이 명백하다.</p>\n<ul>\n<li>하지만 훨씬 덜 명확하거나, 심지어 직관에 반대되는 상황도 있음.</li>\n<li>\n<p>대표적인 예로 어댑터 패턴(Adapter Pattern)이 있음.</p>\n<ul>\n<li>어댑터는 실제 작업은 뒷단 객체에 위임하고, 자신은 제2의 인터페이스 역할을 해주는 객체.</li>\n<li>어댑터는 뒷단 객체만 관리하면 됨.</li>\n<li>즉, 뒷단 객체 외에는 관리할 상태가 없으므로 뒷단 객체 하나당 어댑터 하나씩만 만들어지면 충분함.</li>\n</ul>\n</li>\n<li>\n<p>예컨대 Map 인터페이스의 keySet 메서드는 Map 객체 안의 키 전부를 담은 Set 뷰를 반환함.</p>\n<ul>\n<li>keySet을 호출할 때마다 새로운 Set 인스턴스가 만들어지는게 아닌 매번 같은 Set 인스턴스를 반환함.</li>\n<li>반환한 객체 중 하나를 수정하면 다른 모든 객체가 따라서 바뀜.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/146502948-b51323f6-a365-4c64-8685-92313f51c1e5.png\" alt=\"Untitled (90)\"></p>\n<ul>\n<li>keySet이 뷰 객체를 여러 개 만들어도 상관없지만, 그럴 필요도 없고 이득도 없음.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>불필요한 객체를 만들어내는 또 다른 예로 오토박싱(auto boxing)을 들 수 있음.</p>\n<ul>\n<li>오토박싱은 프로그래머가 기본 타입과 박싱된 기본 타입을 섞어 쓸 때 자동으로 상호 변환해주는 기술.</li>\n<li>오토박싱은 기본 타입과 그에 대응하는 박싱된 기본 타입의 구분을 흐려주지만, 완전히 없애주는 것은 아님.</li>\n<li>의미상으로는 별다를 것 없지만 성능에는 그렇지 않음.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>sum 변수를 Long으로 선언해서 불필요한 Long 인스턴스가 약 2의 31승개나 만들어진 것.</li>\n<li>이 경우에 박싱된 기본 타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 주의하자.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>\n<p>\"객체 생성은 비싸니 피해야 한다\"로 오해하면 안 됨.</p>\n<ul>\n<li>요즘 JVM은 작은 객체 생성하고 회수하는 일이 크게 부담되지 않음.</li>\n<li>프로그램의 명확성, 간결성, 기능을 위해서 객체를 추가로 생성하는 것이라면 일반적으로 좋은 일.</li>\n</ul>\n</li>\n<li>\n<p>아주 무거운 객체가 아닌 이상 단순히 객체 생성을 피하고자 객체 풀(pool)을 만들지는 말자.</p>\n<ul>\n<li>DB Connection과 같이 생성 비용이 비싼 경우가 아니고서야 자체 객체 풀은 코드를 헷갈리게 만들고 메모리 사용량을 늘리고 성능을 떨어뜨림.</li>\n<li>요즘 JVM GC는 상당히 잘 최적화되어서 가벼운 객체용을 다룰 때는 직접 만든 객체 풀보다 훨씬 빠르다.</li>\n</ul>\n</li>\n<li>\n<p>방어적 복사가 필요한 상황에서 객체를 재사용했을 때의 피해가 필요 없는 객체를 반복 생성했을 때의 피해보다 훨씬 크다는 사실을 기억하자.</p>\n<ul>\n<li>방어적 복사에 실패하면 버그와 보안 구멍으로 이어지지만, 불필요한 객체 생성은 그저 코드 형태와 성능에만 영향을 줌.</li>\n</ul>\n</li>\n</ul>","excerpt":"똑같은 기능의 객체를 매번 생성하기보다는 객체 하나를 재사용하는 편이 나을 때가 많다. 재사용은 빠르고 세련됨. 특히 불변 객체는 언제든 재사용할 수 있다. 첫번째 코드는 String 인스턴스를 새로 만들게 되어 생성자에 넘겨진 \"bikini\" 자체…","tableOfContents":"<ul>\n<li><a href=\"/effective-java-item6/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","fields":{"slug":"/effective-java-item6/"},"frontmatter":{"title":"[이펙티브 자바] 6. 불필요한 객체 생성을 피하라","date":"Dec 15, 2021","tags":["java","book"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/effective-java-item6/","series":[],"lastmod":"2021-12-15"}},"staticQueryHashes":["2027115977","694178885"]}