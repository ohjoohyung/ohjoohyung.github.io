{"componentChunkName":"component---src-templates-post-tsx","path":"/effective-java-item12/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"tostring을-재정의하자\" style=\"position:relative;\"><a href=\"#tostring%EC%9D%84-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EC%9E%90\" aria-label=\"tostring을 재정의하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toString을 재정의하자.</h2>\n<ul>\n<li>Object의 기본 toString 메서드는 PhoneNumber@abddb처럼 단순히 <strong>클래스_이름@16진수로_표시한_해시코드</strong>를 반환할 뿐임.</li>\n<li>\n<p>toString의 일반 규약에 따르면 '간결하면서 사람이 읽기 쉬운 형태의 유익한 정보'를 반환해야 함.</p>\n<ul>\n<li>규약은 \"모든 하위 클래스에서 이 메서드를 재정의하라\"고 함.</li>\n</ul>\n</li>\n<li>\n<p>toString을 잘 구현한 클래스는 사용하기에 훨씬 즐겁고, 그 클래스를 사용한 시스템은 디버깅이 쉬움.</p>\n<ul>\n<li>toString을 제대로 재정의하지 않는다면 쓸모없는 메시지만 로그에 남을 것.</li>\n</ul>\n</li>\n<li>좋은 toString은 (특히 컬렉션처럼) 이 인스턴스를 포함하는 객체에서 유용하게 쓰인다.</li>\n<li>\n<p>실전에서 toString은 그 객체가 가진 주요 정보 모두를 반환하는게 좋음.</p>\n<ul>\n<li>\n<p>단, 객체가 거대하거나 객체의 상태가 문자열로 표현하기에 적합하지 않다면 무리가 있음.</p>\n<ul>\n<li>이럴 땐 요약 정보를 담자.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"tostring-포맷-문서화\" style=\"position:relative;\"><a href=\"#tostring-%ED%8F%AC%EB%A7%B7-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-label=\"tostring 포맷 문서화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toString 포맷 문서화</h2>\n<ul>\n<li>\n<p>toString을 구현할 때면 반환값의 포맷을 문서화할지 정해야 함.</p>\n<ul>\n<li>전화번호나 행렬 같은 값 클래스라면 문서화하기를 권함.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>\n<p>포맷을 명시하면 그 객체는 표준적이고, 명확하고, 사람이 읽을 수 있게 됨.</p>\n<ul>\n<li>따라서 그 값 그대로 입출력에 사용하거나 CSV 파일처럼 사람이 읽을 수 있는 데이터 객체로 저장할 수도 있음.</li>\n</ul>\n</li>\n<li>\n<p>포맷을 명시하기로 했다면, 명시한 포맷에 맞는 문자열과 객체를 상호 전환할 수 있는 정적 팩터리나 생성자를 함께 제공하는 것이 좋다.</p>\n<ul>\n<li>BigInteger, BigDecimal 등이 예</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>포맷을 한번 명시하면 평생 그 포맷에 얽매이게 됨.</li>\n<li>포맷을 바꾼다면 이를 사용하던 코드들과 데이터들은 엉망이 될 것.</li>\n<li>포맷을 명시하지 않는다면 향후 릴리스에서 정보를 더 넣거나 포맷을 개선할 수 있는 유연성을 얻게 됨.</li>\n</ul>\n<br/>\n<ul>\n<li>포맷을 명시하든 아니든 의도는 명확히 밝혀야 함.</li>\n<li>\n<p>포맷 명시 여부와 상관없이 toString이 반환하는 값에 포함된 정보를 얻어올 수 있는 API를 제공하자.</p>\n<ul>\n<li>그렇지 않으면 이 정보가 필요한 프로그래머는 toString의 반환값을 파싱할 수 밖에 없음.</li>\n<li>성능이 나빠지고 필요하지도 않은 작업.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"자동-생성-tostring\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1-tostring\" aria-label=\"자동 생성 tostring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 생성 toString</h2>\n<ul>\n<li>AutoValue 프레임워크, IDE는 toString을 생성해줌.</li>\n<li>\n<p>자동 생성된 toString은 필드의 내용은 나타내어 주지만 클래스의 '의미'까지 파악하지는 못함.</p>\n<ul>\n<li>비록 자동 생성에 적합하지는 않더라도 객체의 값에 관해 아무것도 알려주지 않는 Object의 toString보다는 자동 생성된 toString이 훨씬 유용함.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h2>\n<ul>\n<li>\n<p>모든 구체 클래스에서 Object의 toString을 재정의하자.</p>\n<ul>\n<li>상위 클래스에서 이미 알맞게 재정의한 경우는 예외.</li>\n</ul>\n</li>\n<li>toString을 재정의한 클래스는 사용하기도 즐겁고 그 클래스를 사용한 시스템을 디버깅하기 쉽게 해준다.</li>\n<li>toString은 해당 객체에 관한 명확하고 유용한 정보를 읽기 좋은 형태로 반환해야 한다.</li>\n</ul>","excerpt":"toString을 재정의하자. Object의 기본 toString 메서드는 PhoneNumber@abddb처럼 단순히 클래스_이름@16진수로_표시한_해시코드를 반환할 뿐임. toString의 일반 규약에 따르면 '간결하면서 사람이 읽기 쉬운 형태의 …","tableOfContents":"<ul>\n<li><a href=\"/effective-java-item12/#tostring%EC%9D%84-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%98%EC%9E%90\">toString을 재정의하자.</a></li>\n<li>\n<p><a href=\"/effective-java-item12/#tostring-%ED%8F%AC%EB%A7%B7-%EB%AC%B8%EC%84%9C%ED%99%94\">toString 포맷 문서화</a></p>\n<ul>\n<li><a href=\"/effective-java-item12/#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"/effective-java-item12/#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li><a href=\"/effective-java-item12/#%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1-tostring\">자동 생성 toString</a></li>\n<li><a href=\"/effective-java-item12/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","fields":{"slug":"/effective-java-item12/"},"frontmatter":{"title":"[이펙티브 자바] 12. toString을 항상 재정의하라","date":"Dec 19, 2021","tags":["java","book"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/effective-java-item12/","series":[],"lastmod":"2021-12-19"}},"staticQueryHashes":["2027115977","694178885"]}