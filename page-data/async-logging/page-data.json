{"componentChunkName":"component---src-templates-post-tsx","path":"/async-logging/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"프로젝트-로깅-문제\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A1%9C%EA%B9%85-%EB%AC%B8%EC%A0%9C\" aria-label=\"프로젝트 로깅 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 로깅 문제</h2>\n<ul>\n<li>현재 보또보 프로젝트에서는 로깅을 위해 Logback을 사용하고 있다.</li>\n<li>기본적으로 스프링에서 생기는 로그 + HTTP 요청 응답 로그 + JPA로 생기는 쿼리와 바인딩 데이터 로그를 남기기로 했다.</li>\n<li>\n<p>Local, Test 환경에서는 콘솔에 로그를 출력시키기만 했고 Dev, Prod 환경에서는 INFO, WARN, ERROR 로그, HTTP 요청 응답 로그, 쿼리 + 바인딩 데이터 로그를 파일로 남기기로 했다.</p>\n<ul>\n<li>더 자세한 것은 <a href=\"https://github.com/woowacourse-teams/2021-botobo/wiki/%EB%A1%9C%EA%B9%85-%EC%A0%84%EB%9E%B5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">보또보 위키</a> 를 참고하자!  </li>\n</ul>\n</li>\n<li>문제는 쿼리 + 바인딩 데이터 로그에서 시작되었다.</li>\n<li>다양한 문제집 보기라는 보또보 사이트에서 제공해주는 기능이 있다.\n이 기능은 사이트 내 등록이 되어있는 문제집 중 랜덤으로 100개를 제공해주는 기능이다.</li>\n<li>100개의 문제집을 조회하기 위해서는 하나의 조회문에서 파생되는 여러 조회문이 있었고 (한방 쿼리를 사용하기에는 연관관계가 너무 많고 N+1 문제를 해결하기 위해 Batch Size를 설정했다) 그러다보니 쿼리문 + 바인딩된 데이터 로그가 정말 많이 발생하게 되었다.</li>\n</ul>\n<p>그 결과 한번 서비스를 접근해서 100개의 문제집을 제공 받기까지 사용자 입장에서 시간이 너무 오래걸렸다.</p>\n<ul>\n<li>일단 Prod 서버에는 쿼리 + 바인딩 데이터 로그를 남기지 않기기로 했다.\n우리가 이 로그를 남기기로 했는 이유는 최대한 로그를 많이 남기는게 에러를 추적하기 용이하다 + 한번 로그를 다 남겨보자 였다.\n검색해보니 이 로그는 보통 테스트하는 환경에서 남기고 실제 운영 서버에서는 남기지 않는 경우가 많다기에 Prod 서버에서는 남기지 않기로 하였고 그 결과 로딩 시간이 단축되는 현상을 볼 수 있었다.</li>\n</ul>\n<p>하지만 여전히 Dev 서버에는 로그를 남기고 있었기에 어떻게 하면 로그를 남기면서 성능을 향상시킬 수 있을까 고민했다.</p>\n<h2 id=\"비동기-로깅\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%A1%9C%EA%B9%85\" aria-label=\"비동기 로깅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 로깅</h2>\n<ul>\n<li>현재 Logback에서 로그를 동기로 남기고 있었고 비동기로 남기면 성능이 향상될 수 있다는 이야기를 들었고 이에 비동기로 로깅을 변경해보기로 했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>included</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_LOG_PATH<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logs/query<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_LOG_FILE_NAME<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>query<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appender</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_FILE<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch.qos.logback.classic.filter.LevelFilter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>level</span><span class=\"token punctuation\">></span></span>TRACE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>level</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>encoder</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span><span class=\"token punctuation\">></span></span>\n                %d{yyyy-MM-dd HH:mm:ss} %n    > %msg%n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>encoder</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rollingPolicy</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fileNamePattern</span><span class=\"token punctuation\">></span></span>${QUERY_LOG_PATH}/${QUERY_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fileNamePattern</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maxFileSize</span><span class=\"token punctuation\">></span></span>3MB<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maxFileSize</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maxHistory</span><span class=\"token punctuation\">></span></span>100<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maxHistory</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rollingPolicy</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appender</span><span class=\"token punctuation\">></span></span>\n\n\t\t// AsyncAppender 설정\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appender</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_FILE_ASYNC<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch.qos.logback.classic.AsyncAppender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appender-ref</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_FILE<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queueSize</span><span class=\"token punctuation\">></span></span>512<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>queueSize</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>discardingThreshold</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>discardingThreshold</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>includeCallerData</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>includeCallerData</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>neverBlock</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>neverBlock</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maxFlushTime</span><span class=\"token punctuation\">></span></span>1000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maxFlushTime</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appender</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.hibernate.SQL<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DEBUG<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">additivity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appender-ref</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_FILE_ASYNC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>logger</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.hibernate.type.descriptor.sql.BasicBinder<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TRACE<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">additivity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appender-ref</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_FILE_ASYNC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>logger</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.hibernate.type.descriptor.sql.BasicExtractor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TRACE<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">additivity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appender-ref</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>QUERY_FILE_ASYNC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>logger</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>included</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>적용 방법은 생각보다 간단했다.</p>\n<ul>\n<li>파일로 남기는 설정인 RollingFileAppender를 AsyncAppender로 감싸기만 하면 되었다.</li>\n</ul>\n</li>\n<li>\n<p>각각의 AsyncAppender 설정 옵션은 이렇다.</p>\n<ol>\n<li>\n<p>queueSize</p>\n<ul>\n<li>\n<p>async로 동작하기 위해서는 log들을 BlockingQueue를 이용해 버퍼에 저장해 둔다. 버퍼에 저장해두는 queue의 사이즈를 의미하며 해당 queue 사이즈의 80%가 초과하게 되면 WARN, ERROR를 제외하고 drop한다. 따라서 적절한 queueSize를 사용해야 하며 default는 256이다.\n밑에 사이트를 바탕으로 512로 설정하였다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/146629449-4622b679-2300-4e54-b6e1-59e1633bf6e7.png\" alt=\"Untitled - 2021-12-18T135152 434\"></p>\n<ul>\n<li><a href=\"https://dzone.com/articles/how-instantly-improve-your-0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dzone.com/articles/how-instantly-improve-your-0</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>discardingThreshold</p>\n<ul>\n<li>기본적으로 blocking queue에 20% 용량이 남아 있으면 TRACE, DEBUG 및 INFO 수준의 이벤트를 삭제하고 WARN 및 ERROR 수준의 이벤트만 유지한다. 이 값을 0으로 설정하면 모든 이벤트를 유지한다. default는 20이다.\nINFO 로그를 삭제하고 싶지않아서 0으로 설정했다.</li>\n</ul>\n</li>\n<li>\n<p>includeCallData</p>\n<ul>\n<li>발신자의 정보(class명, 줄번호 등)가 추가되어 수집 서버로 전송여부를 결정한다. true 설정 시 성능 저하를 일으킬 수 있다. default는 false이다. 성능 문제로 인해 false를 권장하지만 false로 설정할 경우에는 class, method, line 수 등을 로그에서 확인할 수 없다. 실제로 false로 설정했을 때 ?.?.? 이런 형식으로 로그가 남는 결과를 볼 수 있었다.</li>\n</ul>\n</li>\n<li>\n<p>maxFlushTime</p>\n<ul>\n<li>LoggerContext가 정지하면 AsyncAppender의 stop 메서드는 작업 스레드가 timeout 될 때까지 대기한다. maxFlushTime을 사용하면 timeout 시간을 밀리초로 설정할 수 있다. 해당 시간안에 처리하지 못한 이벤트는 삭제된다. defult는 1000이다.</li>\n</ul>\n</li>\n<li>\n<p>neverBlock</p>\n<ul>\n<li>queue에 가득차게 되는 경우 다른 쓰레드의 작업들이 blocking 상태에 빠지게 되는데 해당 옵션을 true하게 되면 blocking 상태에 빠지지 않고 log를 drop하며 계속 진행할 수 있게 해준다. 로그의 버퍼가 꽉 차서 application이 blocking되지 않기 위해 반드시 true를 적용하는 것을 권장한다. default는 false이다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"비동기-적용-결과\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%A0%81%EC%9A%A9-%EA%B2%B0%EA%B3%BC\" aria-label=\"비동기 적용 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 적용 결과</h2>\n<ul>\n<li>적용하고 성능 테스트를 해보았다.</li>\n<li>생각보다 결과가 흥미로웠다.</li>\n<li>\n<p>성능 테스트 도구로 k6를 사용했다. 설정은 다음과 같다.</p>\n<ul>\n<li>VUSER는 100명</li>\n<li>1분동안 진행</li>\n<li>모든 요청의 99% 이상의 소요시간이 1500ms 이내에 들어야 한다.</li>\n<li>모든 요청은 다양한 문제집 보기 서비스에 접근하여 100개의 문제집을 조회하도록 하였다.</li>\n</ul>\n</li>\n<li>\n<p>비동기 로깅 적용 전</p>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/146629455-3582b1e2-4a26-460a-b855-59c80dfdca25.png\" alt=\"Screen_Shot_2021-09-29_at_5 51 26_PM (1)\"></p>\n</li>\n</ul>\n<p>주목할 점은 http_req_duration, http_req_failed,\nhttp_reqs이다.</p>\n<p>http_req_duration은 평균적으로 한번의 요청당 얼마만큼의 시간이 소요되었는지를 알 수 있는데 평균 31초가 걸렸다고 적혀있다.</p>\n<p>http_req_failed는 요청 실패율,\nhttp_reqs는 총 요청 수를 나타낸다.\n73.50%의 실패율과 요청 수가 151개로 측정되었다.</p>\n<ul>\n<li>\n<p>비동기 로깅 적용 후</p>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/146629461-807d2b5d-df69-4bb8-bfc0-55c35f37824a.png\" alt=\"Screen_Shot_2021-09-29_at_6 26 02_PM (1)\"></p>\n</li>\n</ul>\n<p>로깅 전과 비교해보면 확실하게 성능이 좋아졌다는 것을 볼 수 있다.</p>\n<p>요청 소요 시간도 평균 4.85초로 줄어들었으며 실패율도 0%, 그에 따라 요청 수도 680개로 이를 모두 처리했다는 결과를 볼 수 있었다.</p>\n<h2 id=\"그렇다면-꼭-비동기로-로깅을-해야할까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EA%BC%AD-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A1%9C-%EB%A1%9C%EA%B9%85%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C\" aria-label=\"그렇다면 꼭 비동기로 로깅을 해야할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 꼭 비동기로 로깅을 해야할까?</h2>\n<ul>\n<li>그렇다면 앞으로 모든 로깅을 비동기로 처리해야할까?</li>\n<li>\n<p>일단 이렇게 비동기로 로깅을 처리하게 되면 단점들이 몇 가지 있다고 한다.</p>\n<ul>\n<li>queueSize를 너무 작게 하는 경우 WARN, ERROR를 제외하고 로그의 손실을 가져올 수 있다.</li>\n<li>버퍼를 이용하니 메모리의 사용량이 증가하고 CPU 사용량 또한 증가한다.</li>\n<li>중간에 서버가 다운되는 경우 버퍼에 로그가 남아 있으면 버퍼가 로그를 다 쓰기 전에 종료되어 손실이 발생한다.</li>\n</ul>\n</li>\n<li>개인적인 생각으로 어느 정도 규모가 있고 로그를 많이 남겨야 하는 서비스에서는 비동기로 로깅을 하지 않을 이유는 없다고 생각한다. 비동기로 로그를 남기는게 성능상 이점을 더 챙겨올 수 있고 로그 손실 이슈에 경우는 설정만 잘 해놓으면 어느 정도 방지할 수도 있으니 말이다.</li>\n<li>그리고 Logback 비동기를 좀 찾아보니 Log4j2 비동기가 훨씬 더 성능상 좋은거 같았다.\n로깅을 남기면서 성능상의 이점을 더 챙기려면 Log4j2를 가지고 가는 것도 좋은것 같으니 필요하면 찾아보도록 하자.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/146629463-64520617-fa7d-403c-89de-d421d8f5a663.png\" alt=\"Untitled - 2021-12-18T135205 226\"></p>\n<p><a href=\"https://logging.apache.org/log4j/2.x/performance.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://logging.apache.org/log4j/2.x/performance.html</a></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<ul>\n<li>로깅을 비동기로 바꿨을 뿐인데 이렇게 눈에 띄는 성능 차이를 보일 줄은 몰랐다.</li>\n<li>생각보다 성능 테스트를 하는게 재밌었다.</li>\n<li>다만 아쉬운점은 테스트용 서버를 따로 구축해서 테스트를 한 것이 아닌 기존 Dev 서버에서 진행했다는 점.\nRedis를 도입하게 될 경우도 생각하면 테스트용 서버를 하나 만들어서 대량의 데이터를 넣어두고 VUSER를 더 높인 테스트를 진행해봐야겠다.</li>\n</ul>","excerpt":"프로젝트 로깅 문제 현재 보또보 프로젝트에서는 로깅을 위해 Logback을 사용하고 있다. 기본적으로 스프링에서 생기는 로그 + HTTP 요청 응답 로그 + JPA로 생기는 쿼리와 바인딩 데이터 로그를 남기기로 했다. Local, Test 환경에서는…","tableOfContents":"<ul>\n<li><a href=\"/async-logging/#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A1%9C%EA%B9%85-%EB%AC%B8%EC%A0%9C\">프로젝트 로깅 문제</a></li>\n<li><a href=\"/async-logging/#%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%A1%9C%EA%B9%85\">비동기 로깅</a></li>\n<li><a href=\"/async-logging/#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%A0%81%EC%9A%A9-%EA%B2%B0%EA%B3%BC\">비동기 적용 결과</a></li>\n<li><a href=\"/async-logging/#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EA%BC%AD-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A1%9C-%EB%A1%9C%EA%B9%85%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C\">그렇다면 꼭 비동기로 로깅을 해야할까?</a></li>\n<li><a href=\"/async-logging/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>","fields":{"slug":"/async-logging/"},"frontmatter":{"title":"로깅이 성능에 미치는 영향과 비동기 로깅","date":"Oct 02, 2021","tags":["spring","logback"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/async-logging/","series":[],"lastmod":"2021-10-02"}},"staticQueryHashes":["2027115977","694178885"]}