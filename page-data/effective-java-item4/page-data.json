{"componentChunkName":"component---src-templates-post-tsx","path":"/effective-java-item4/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>\n<p>정적 메서드와 정적 필드만을 담은 클래스를 만들고 싶을 때가 있을 것.</p>\n<ul>\n<li>객체 지향적으로 사고하지 않는 이들이 종종 남용하는 방식이기에 그리 곱게 보이지는 않지만, 분명 나름의 쓰임새가 있음.</li>\n<li>\n<p>그렇다면 정적 메서드와 정적 필드를 사용하는 것이 왜 객체 지향적이 아닐까?</p>\n<ul>\n<li><a href=\"https://jgrammer.tistory.com/entry/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94%EB%A5%BC-%EB%A7%89%EC%9C%BC%EB%A0%A4%EA%B1%B0%EB%93%A0-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%9D%BC-java-static-%EA%B0%9C%EB%85%90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jgrammer.tistory.com/entry/이펙티브자바-인스턴스화를-막으려거든-private-생성자를-사용해라-java-static-개념</a></li>\n<li>위 블로그 글에 적혀있는 것처럼 정적 필드와 정적 메서드를 사용하면 다형성과 거리가 멀어진다.</li>\n<li>객체 지향의 여러 특징 중에 다형성이 있는데 이 다형성을 해치기 때문에 객체 지향적이 아니라고 하는 것 같다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>하지만 그럼에도 불구하고 정적 필드와 정적 메서드는 나름의 쓰임새가 있다.</p>\n<ul>\n<li>예를 들어 java.lang.Math나 java.util.Arrays 처럼 기본 타입 값이나 배열 관련 메서드들을 모아놓을 수 있다.</li>\n<li>java.util.Collections처럼 특정 인터페이스를 구현하는 객체를 생성해주는 정적 메서드(혹은 팩터리)를 모아놓을 수도 있음. (자바 8부터는 이런 메서드를 인터페이스에 넣을 수 있다.)</li>\n<li>\n<p>final 클래스와 관련한 메서드들을 모아놓을 수도 있음.</p>\n<ul>\n<li>final 클래스를 상속해서 하위 클래스에서 메서드를 넣는 건 불가능하기 때문이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>정적 멤버만 담은 유틸리티 클래스는 인스턴스로 만들어 쓰려고 설계한게 아니다.</p>\n<ul>\n<li>하지만 생성자를 명시하지 않으면 컴파일러가 자동으로 기본 생성자를 만들어 준다.</li>\n<li>즉, 매개변수를 받지 않는 public 생성자가 만들어지며, 사용자는 이 생성자가 자동 생성된 것인지 구분할 수 없음.</li>\n</ul>\n</li>\n<li>\n<p><strong>단순하게 추상 클래스로 만드는 것으로는 인스턴스화를 막을 수 없음.</strong></p>\n<ul>\n<li>하위 클래스를 만들어 인스턴스화하면 그만이다.</li>\n<li>사용자는 상속해서 쓰라는 뜻으로 오해할 수 있으니 더 큰 문제이다.</li>\n</ul>\n</li>\n<li>\n<p>이를 해결하기 위해 private 생성자를 추가하여 클래스의 인스턴스화를 막을 수 있음.</p>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/146129252-81aa01e2-50a4-42e0-a16e-dcd32b4efc16.png\" alt=\"Untitled (66)\"></p>\n<ul>\n<li>필요에 따라 생성자 코드 내부에 throw new AssertionError()와 같이 예외를 추가할 수 있음.</li>\n<li>다만, 이 코드는 직관적이지 않으니 적절한 주석을 달아주는 것을 추천</li>\n<li>이 방식은 상속이 불가능하게 하는 효과도 있음!</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀 점</h2>\n<ul>\n<li>유틸리티 클래스를 만들때 private 생성자를 명시한다는 것 잊지말자</li>\n</ul>","excerpt":"정적 메서드와 정적 필드만을 담은 클래스를 만들고 싶을 때가 있을 것. 객체 지향적으로 사고하지 않는 이들이 종종 남용하는 방식이기에 그리 곱게 보이지는 않지만, 분명 나름의 쓰임새가 있음. 그렇다면 정적 메서드와 정적 필드를 사용하는 것이 왜 객체…","tableOfContents":"<ul>\n<li><a href=\"/effective-java-item4/#%EB%8A%90%EB%82%80-%EC%A0%90\">느낀 점</a></li>\n</ul>","fields":{"slug":"/effective-java-item4/"},"frontmatter":{"title":"[이펙티브 자바] 4. 인스턴스화를 막으려거든 private 생성자를 사용하라","date":"Dec 14, 2021","tags":["java","book"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/effective-java-item4/","series":[],"lastmod":"2021-12-14"}},"staticQueryHashes":["2027115977","694178885"]}