{"componentChunkName":"component---src-templates-post-tsx","path":"/effective-java-item14/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"compareto-comparable\" style=\"position:relative;\"><a href=\"#compareto-comparable\" aria-label=\"compareto comparable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compareTo, Comparable?</h2>\n<ul>\n<li>compareTo는 단순 동치성 비교에 더해 순서까지 비교할 수 있으며, 제네릭하다.</li>\n<li>\n<p>Comparable을 구현했다는 것은 그 클래스의 인스턴스들에는 자연적인 순서(natural order)가 있음을 뜻한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>Comparable을 구현한 객체들의 배열은 위처럼 손쉽게 정렬할 수 있다.</li>\n<li>검색, 극단값 계산, 자동 정렬되는 컬렉션 관리도 역시 쉽게 할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WordList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>위 프로그램은 명령줄 인수들을 (중복을 제거하고) 알파벳순으로 출력한다.</p>\n<ul>\n<li>String이 Comparable을 구현한 덕분임.</li>\n</ul>\n</li>\n<li>사실상 자바 플랫폼 라이브러리의 모든 값 클래스와 열거 타입이 Comparable을 구현했다.</li>\n<li>알파벳, 숫자, 연대 같이 순서가 명확한 값 클래스를 작성한다면 반드시 Comparable 인터페이스를 구현하자.</li>\n</ul>\n<br/>\n<h2 id=\"compareto-메서드의-일반-규약\" style=\"position:relative;\"><a href=\"#compareto-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD\" aria-label=\"compareto 메서드의 일반 규약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compareTo 메서드의 일반 규약</h2>\n<blockquote>\n<p>이 객체와 주어진 객체의 순서를 비교한다. 이 객체가 주어진 객체보다 작으면 음의 정수를, 같으면 0을, 크면 양의 정수를 반환한다.\n이 객체와 비교할 수 없는 타입의 객체가 주어지면 ClassCastException을 던진다.</p>\n<ul>\n<li>Comparable을 구현한 클래스는 모든 x,y에 대해 sgn(x.compareTo(y)) == -sgn(y.compareTo(x))여야 한다 (따라서 x.compareTo(y)는 y.compareTo(x)가 예외를 던질 때에 한해 예외를 던져야 한다)</li>\n<li>Comparable을 구현한 클래스는 추이성을 보장해야 한다. 즉, (x.compareTo(y) > 0 &#x26;&#x26; y.compareTo(z) > 0)이면 x.compareTo(z) > 0이다.</li>\n<li>Comparable을 구현한 클래스는 모든 z에 대해 x.compareTo(y) == 0이면 sgn(x.compareTo(z)) == sgn(y.compareTo(z))다.</li>\n<li>이번 권고가 필수는 아니지만 꼭 지키는게 좋다. (x.compareTo(y) == 0) == (x.equals(y))여야 한다. Comparable을 구현하고 이 권고를 지키지 않는 모든 클래스는 그 사실을 명시해야 한다.<br>\n\"주의: 이 클래스의 순서는 equals 메서드와 일관되지 않다.\"</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>첫 번째 규약은 두 객체 참조의 순서를 바꿔 비교해도 예상한 결과가 나와야 한다는 얘기.</p>\n<ul>\n<li>첫 번째 객체가 두 번째 객체보다 작으면, 두 번째가 첫 번째보다 커야 한다.</li>\n<li>첫 번째가 두 번째와 크기가 같다면, 두 번째는 첫 번째와 같아야 한다.</li>\n<li>첫 번째가 두 번째보다 크면, 두 번째는 첫 번째보다 작아야 한다.</li>\n</ul>\n</li>\n<li>두 번째 규약은 첫 번째가 두 번째보다 크고 두 번째가 세 번째보다 크면, 첫 번째는 세 번째보다 커야 한다는 뜻.</li>\n<li>세 번째 규약은 크기가 같은 객체들끼리는 어떤 객체와 비교하더라도 항상 같아야 한다는 뜻.</li>\n<li>\n<p>마지막 규약은 필수는 아니지만 꼭 지키길 권한다.</p>\n<ul>\n<li>compareTo 메서드로 수행한 동치성 테스트의 결과가 equals와 같아야 한다는 것.</li>\n<li>compareTo의 순서와 equals의 결과가 일관되지 않은 클래스도 여전히 동작은 하지만 이 클래스의 객체를 정렬된 컬렉션애 넣으면 해당 컬렉션이 구현한 인터페이스에 정의된 동작과 엇박자를 낼 것.</li>\n<li>이 인터페이스들은 equals 메서드의 규약을 따른다고 되어 있지만, 동치성을 비교할 때 equals 대신 compareTo를 사용하기 때문.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>모든 객체에 대해 전역 동치관계를 부여하는 equals 메서드와 달리, compareTo는 타입이 다른 객체를 신경 쓰지 않아도 된다.</p>\n<ul>\n<li>타입이 다른 객체가 주어지면 간단히 ClassCastException을 던져도 된다.</li>\n</ul>\n</li>\n<li>\n<p>hashCode 규약을 지키지 못하면 해시를 사용하는 클래스와 어울리지 못하듯, compareTo 규약을 지키지 못하면 비교를 활용하는 클래스와 어울리지 못함.</p>\n<ul>\n<li>대표적인 예로 정렬된 컬렉션인 TreeSet, TreeMap, 검색과 정렬 알고리즘을 활용하는 유틸리티 클래스인 Collections, Arrays</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"객체-참조-필드가-하나뿐인-비교자\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0-%ED%95%84%EB%93%9C%EA%B0%80-%ED%95%98%EB%82%98%EB%BF%90%EC%9D%B8-%EB%B9%84%EA%B5%90%EC%9E%90\" aria-label=\"객체 참조 필드가 하나뿐인 비교자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 참조 필드가 하나뿐인 비교자</h2>\n<ul>\n<li>\n<p>Comparable은 타입을 인수로 받는 제네릭 인터페이스이므로 compareTo 메서드의 인수 타입은 컴파일타임에 정해진다.</p>\n<ul>\n<li>입력 인수의 타입을 확인하거나 형변환할 필요가 없다는 뜻.</li>\n</ul>\n</li>\n<li>null을 인수로 넣어 호출하면 NullPointerException을 던져야 함.</li>\n<li>compareTo 메서드는 각 필드가 동치인지를 비교하는 게 아니라 그 순서를 비교함.</li>\n<li>객체 참조 필드를 비교하려면 compareTo 메서드를 재귀적으로 호출함.</li>\n<li>\n<p>Comparable을 구현하지 않은 필드나 표준이 아닌 순서로 비교해야 한다면 비교자(Comparator)를 대신 사용함.</p>\n<ul>\n<li>\n<p>비교자는 직접 만들거나 자바가 제공하는 것 중에 골라 쓰면 됨.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 코드 14-1 객체 참조 필드가 하나뿐인 비교자 (90쪽)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span>\n<span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// 자바가 제공하는 비교자를 사용해 클래스를 비교한다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span> cis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> cis<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>CaseInsensitiveString의 참조는 CaseInsensitiveString 참조와만 비교할 수 있음.</li>\n</ul>\n</li>\n<li>\n<p>정수 기본 타입 필드를 비교할 때도 박싱된 기본 타입 클래스의 정적 메서드인 compare를 이용하자.</p>\n<ul>\n<li>compareTo 메서드에서 관계 연산자 &#x3C;,>를 사용하는 이전 방식은 거추장스럽고 오류를 유발하니, 추천하지 않음.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"기본-타입-필드가-여럿일-때의-비교자\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%83%80%EC%9E%85-%ED%95%84%EB%93%9C%EA%B0%80-%EC%97%AC%EB%9F%BF%EC%9D%BC-%EB%95%8C%EC%9D%98-%EB%B9%84%EA%B5%90%EC%9E%90\" aria-label=\"기본 타입 필드가 여럿일 때의 비교자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 타입 필드가 여럿일 때의 비교자</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 코드 14-2 기본 타입 필드가 여럿일 때의 비교자 (91쪽)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PhoneNumber</span> pn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>areaCode<span class=\"token punctuation\">,</span> pn<span class=\"token punctuation\">.</span>areaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> pn<span class=\"token punctuation\">.</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">,</span> pn<span class=\"token punctuation\">.</span>lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>클래스에 핵심 필드가 여러 개라면 어느 것을 먼저 비교하느냐가 중요해진다.</li>\n<li>\n<p>가장 핵심적인 필드부터 비교해나가자.</p>\n<ul>\n<li>비교 결과가 0이 아니라면, 즉 순서가 결정되면 거기서 끝임.</li>\n<li>가장 핵심이 되는 필드가 똑같다면, 똑같지 않은 필드를 찾을 때까지 그 다음으로 중요한 필드를 비교해나감.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"비교자-생성-메서드를-활용한-비교자\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90%EC%9E%90-%EC%83%9D%EC%84%B1-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%B9%84%EA%B5%90%EC%9E%90\" aria-label=\"비교자 생성 메서드를 활용한 비교자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교자 생성 메서드를 활용한 비교자</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token comment\">// 코드 14-3 비교자 생성 메서드를 활용한 비교자 (92쪽)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PhoneNumber</span><span class=\"token punctuation\">></span></span> COMPARATOR <span class=\"token operator\">=</span>\n        <span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PhoneNumber</span> pn<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> pn<span class=\"token punctuation\">.</span>areaCode<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">thenComparingInt</span><span class=\"token punctuation\">(</span>pn <span class=\"token operator\">-></span> pn<span class=\"token punctuation\">.</span>prefix<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">thenComparingInt</span><span class=\"token punctuation\">(</span>pn <span class=\"token operator\">-></span> pn<span class=\"token punctuation\">.</span>lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PhoneNumber</span> pn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> COMPARATOR<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> pn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>자바 8에서는 Comparator 인터페이스가 일련의 비교자 생성 메서드와 팀을 꾸려 메서드 연쇄 방식으로 비교자를 생성할 수 있게 되었다.</p>\n<ul>\n<li>이 비교자들을 Comparable 인터페이스가 원하는 compareTo 메서드를 구현하는 데 멋지게 활용할 수 있다.</li>\n<li>이 방식은 간결하지만 약간의 성능 저하가 뒤따름.</li>\n</ul>\n</li>\n<li>\n<p>Comparator는 수많은 보조 생성 메서드들로 중무장하고 있음.</p>\n<ul>\n<li>long과 double용으로는 comparingInt와 thenComparingInt의 변형 메서드도 준비되어 있음.</li>\n<li>short처럼 더 작은 정수 타입에는 int용 버전을 사용하면 됨.</li>\n<li>이런 식으로 자바의 숫자용 기본 타입을 모두 커버함.</li>\n</ul>\n</li>\n<li>객체 참조용 비교자 생성 메서드도 준비되어 있음.</li>\n<li>\n<p>comparing이라는 정적 메서드 2개가 다중정의되어 있음.</p>\n<ul>\n<li>첫 번째는 키 추출자를 받아서 그 키의 자연적 순서를 사용함.</li>\n<li>두 번째는 키 추출자 하나와 추출된 키를 비교할 비교자까지 총 2개의 인수를 받음.</li>\n</ul>\n</li>\n<li>\n<p>thenComparing이란 인스턴스 메서드 3개가 다중정의되어 있음.</p>\n<ul>\n<li>첫 번째는 비교자 하나만 인수로 받아 그 비교자로 부차 순서를 정함.</li>\n<li>두 번째는 키 추출자를 인수로 받아 그 키의 자연적 순서로 보조 순서를 정함.</li>\n<li>마지막 세 번째는 키 추출자 하나와 추출된 키를 비교할 비교자까지 총 2개의 인수를 받음.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"주의사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의사항</h2>\n<ul>\n<li>\n<p>이따금 '값의 차'를 기준으로 첫 번째 값이 두 번째 값보다 작으면 음수를, 두 값이 같으면 0을, 첫 번째 값이 크면 양수를 반환하는 compareTo나 compare 메서드와 마주할 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashCodeOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>이 방식은 사용하면 안 됨.</p>\n<ul>\n<li>정수 오버플로를 일으키거나 IEEE 754 부동소수점 계산 방식에 따른 오류를 낼 수 있음.</li>\n</ul>\n</li>\n<li>\n<p>대신 다음의 두 방식 중 하나를 사용하자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashCodeOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashCodeOrder <span class=\"token operator\">=</span> \n    <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">-></span> o<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<h2 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h2>\n<ul>\n<li>순서를 고려해야 하는 값 클래스를 작성한다면 꼭 Comparable 인터페이스를 구현하여, 그 인스턴스들을 쉽게 정렬하고, 검색하고, 비교 기능을 제공하는 컬렉션과 어우러지도록 해야 함.</li>\n<li>\n<p>compareTo 메서드에서 필드의 값을 비교할 때 &#x3C;,> 연산자는 쓰지 말자.</p>\n<ul>\n<li>대신 박싱된 기본 타입 클래스가 제공하는 정적 compare 메서드나 Comparator 인터페이스가 제공하는 비교자 생성 메서드를 사용하자.</li>\n</ul>\n</li>\n</ul>","excerpt":"compareTo, Comparable? compareTo는 단순 동치성 비교에 더해 순서까지 비교할 수 있으며, 제네릭하다. Comparable을 구현했다는 것은 그 클래스의 인스턴스들에는 자연적인 순서(natural order)가 있음을 뜻한다.…","tableOfContents":"<ul>\n<li><a href=\"/effective-java-item14/#compareto-comparable\">compareTo, Comparable?</a></li>\n<li><a href=\"/effective-java-item14/#compareto-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD\">compareTo 메서드의 일반 규약</a></li>\n<li><a href=\"/effective-java-item14/#%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0-%ED%95%84%EB%93%9C%EA%B0%80-%ED%95%98%EB%82%98%EB%BF%90%EC%9D%B8-%EB%B9%84%EA%B5%90%EC%9E%90\">객체 참조 필드가 하나뿐인 비교자</a></li>\n<li><a href=\"/effective-java-item14/#%EA%B8%B0%EB%B3%B8-%ED%83%80%EC%9E%85-%ED%95%84%EB%93%9C%EA%B0%80-%EC%97%AC%EB%9F%BF%EC%9D%BC-%EB%95%8C%EC%9D%98-%EB%B9%84%EA%B5%90%EC%9E%90\">기본 타입 필드가 여럿일 때의 비교자</a></li>\n<li><a href=\"/effective-java-item14/#%EB%B9%84%EA%B5%90%EC%9E%90-%EC%83%9D%EC%84%B1-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%B9%84%EA%B5%90%EC%9E%90\">비교자 생성 메서드를 활용한 비교자</a></li>\n<li><a href=\"/effective-java-item14/#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">주의사항</a></li>\n<li><a href=\"/effective-java-item14/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","fields":{"slug":"/effective-java-item14/"},"frontmatter":{"title":"[이펙티브 자바] 14. Comparable을 구현할지 고려하라","date":"Dec 21, 2021","tags":["java","book"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/effective-java-item14/","series":[],"lastmod":"2021-12-21"}},"staticQueryHashes":["2027115977","694178885"]}