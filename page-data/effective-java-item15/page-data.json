{"componentChunkName":"component---src-templates-post-tsx","path":"/effective-java-item15/","result":{"data":{"markdownRemark":{"html":"<p>잘 설계된 컴포넌트는 모든 내부 구현을 완벽히 숨겨, 구현과 API를 깔끔히 분리한다.<br>\n오직 API를 통해서만 다른 컴포넌트와 소통하며 서로의 내부 동작 방식에는 전혀 개의치 않는다.</p>\n<ul>\n<li>정보 은닉, 혹은 캡슐화라고 하는 이 개념은 소프트웨어 설계의 근간이 되는 원리다.</li>\n</ul>\n<h2 id=\"정보-은닉의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%B3%B4-%EC%9D%80%EB%8B%89%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"정보 은닉의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정보 은닉의 장점</h2>\n<ul>\n<li>시스템 개발 속도를 높인다. 여러 컴포넌트를 병렬로 개발할 수 있기 때문이다.</li>\n<li>시스템 관리 비용을 낮춘다. 각 컴포넌트를 더 빨리 파악하여 디버깅할 수 있고, 다른 컴포넌트로 교체하는 부담도 적기 때문이다.</li>\n<li>정보 은닉 자체가 성능을 높여주지는 않지만, 성능 최적화에 도움을 준다. 완성된 시스템을 프로파일링해 최적화할 컴포넌트를 정한 다음\n다른 컴포넌트에 영향을 주지 않고 해당 컴포넌트만 최적화할 수 있기 때문.</li>\n<li>소프트웨어 재사용성을 높인다. 외부에 거의 의존하지 않고 독자적으로 동작할 수 있는 컴포넌트라면\n그 컴포넌트와 함께 개발되지 않는 낯선 환경에서도 유용하게 쓰일 가능성이 크기 때문.</li>\n<li>큰 시스템을 제작하는 난이도를 낮춰준다. 시스템 전체가 아직 완성되지 않은 상태에서도 개별 컴포넌트의 동작을 검증할 수 있기 때문.</li>\n</ul>\n<br/>\n<h2 id=\"자바에서의-정보-은닉\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C%EC%9D%98-%EC%A0%95%EB%B3%B4-%EC%9D%80%EB%8B%89\" aria-label=\"자바에서의 정보 은닉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바에서의 정보 은닉</h2>\n<p>자바는 정보 은닉을 위한 다양한 장치를 제공하는데 그중 접근 제어 메커니즘은 클래스, 인터페이스, 멤버의 접근성(접근 허용 범위)을 명시한다.<br>\n각 요소의 접근성은 그 요소가 선언된 위치와 접근 제한자로 정해지는데 이를 제대로 활용하는 것이 정보 은닉의 핵심.</p>\n<p>기본 원칙은 모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다.<br>\n즉, 소프트웨어가 올바로 동작하는 한 항상 가장 낮은 접근 수준을 부여해야 한다.</p>\n<p>톱레벨 클래스와 인터페이스 부여할 수 있는 접근 수준은 package-private(default)과 public 두 가지다.<br>\npublic으로 선언하면 공개 API가 되며, package-private으로 선언하면 해당 패키지 안에서만 이용할 수 있다.<br>\n패키지 외부에서 쓸 이유가 없다면 package-private으로 선언하자. 그러면 API가 아닌 내부 구현이 되어 언제든 수정할 수 있다.<br>\n즉, 클라이언트에 아무런 피해 없이 다음 릴리스에서 수정, 교체, 제거할 수 있다.<br>\n반면, public으로 선언한다면 API가 되므로 하위 호환을 위해 영원히 관리해줘야만 한다.</p>\n<p>한 클래스에서만 사용하는 package-private 톱레벨 클래스나 인터페이스는 이를 사용하는 클래스 안에 private static으로 중첩시켜보자.<br>\n톱레벨로 두면 같은 패키지의 모든 클래스가 접근할 수 있지만, private static으로 중첩시키면 바깥 클래스 하나에서만 접근할 수 있다.<br>\n물론 이보다 더 중요한 일은 public일 필요가 없는 클래스의 접근 수준을 package-private 톱레벨 클래스로 좁히는 일이다.</p>\n<br/>\n<h2 id=\"접근-수준-네-가지\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80-%EB%84%A4-%EA%B0%80%EC%A7%80\" aria-label=\"접근 수준 네 가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근 수준 네 가지</h2>\n<p>멤버(필드, 메서드, 중첩 클래스, 중첩 인터페이스)에 부여할 수 있는 접근 수준은 네 가지다.</p>\n<ul>\n<li>private: 멤버를 선언한 톱레벨 클래스에서만 접근할 수 있다.</li>\n<li>package-private: 멤버가 소속된 패키지 안의 모든 클래스에서 접근할 수 있다. 접근 제한자를 명시하지 않았을 때 적용되는 패키지 접근 수준. (단, 인터페이스의 멤버는 기본적으로 public이 적용된다.)</li>\n<li>protected: package-private의 접근 범위를 포함하며, 이 멤버를 선언한 클래스의 하위 클래스에서도 접근할 수 있다. (제약이 조금 따른다.)</li>\n<li>public: 모든 곳에서 접근할 수 있다.</li>\n</ul>\n<p>클래스의 공개 API를 세심히 설계한 후, 그 외의 모든 멤버는 private으로 만들자.<br>\n그런 다음 오직 같은 패키지의 다른 클래스가 접근해야 하는 멤버에 한하여 (private 제한자를 제거해) package-private으로 풀어주자.<br>\n권한을 풀어주는 일을 자주 하게 된다면 여러분 시스템에서 컴포넌트를 더 분해해야 하는 것은 아닌지 다시 고민해보자.<br>\nprivate과 package-private 멤버는 모두 해당 클래스의 구현에 해당하므로 보통은 공개 API에 영향을 주지 않는다.\n단, Serializable을 구현한 클래스에서는 그 필드들도 의도치 않게 공개 API가 될 수도 있다.</p>\n<p>public 클래스에서는 멤버의 접근 수준을 package-private에서 protected로 바꾸는 순간 그 멤버에 접근할 수 있는 대상 범위가 엄청나게 넓어진다.<br>\npublic 클래스의 protected 멤버는 공개 API이므로 영원히 지원돼야 한다. 또한 내부 동작 방식을 API 문서에 적어 사용자에게 공개해야 할 수도 있다.\n따라서 protected 멤버의 수는 적을수록 좋다.</p>\n<p>멤버 접근성을 좁히지 못하게 방해하는 제약이 하나 있다.</p>\n<ul>\n<li>상위 클래스의 메서드를 재정의할 때는 그 접근 수준을 상위 클래에서보다 좁게 설정할 수 없다는 것.</li>\n</ul>\n<p>이 제약은 상위 클래스의 인스턴스는 하위 클래스의 인스턴스로 대체해 사용할 수 있어야 한다는 규칙(리스코프 치환 원칙)을 지키기 위해 필요하다.\n이 규칙을 어기면 하위 클래스를 컴파일할 때 컴파일 오류가 난다.</p>\n<br/>\n<h2 id=\"테스트에서-접근-범위\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC-%EB%B2%94%EC%9C%84\" aria-label=\"테스트에서 접근 범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트에서 접근 범위</h2>\n<p>테스트 목적으로 클래스, 인터페이스, 멤버의 접근 범위를 넓히려 할 때가 있다.\n적당한 수준까지도 넓혀도 괜찮다.<br>\n예를 들어, public 클래스의 private 멤버를 package-private까지 풀어주는 것은 허용할 수 있지만, 그 이상은 안 된다.</p>\n<p>즉, 테스트만을 위해 클래스, 인터페이스, 멤버를 공개 API로 만들어서는 안 된다.</p>\n<br/>\n<h2 id=\"public-클래스의-public-필드\" style=\"position:relative;\"><a href=\"#public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-public-%ED%95%84%EB%93%9C\" aria-label=\"public 클래스의 public 필드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>public 클래스의 public 필드</h2>\n<p>public 클래스의 인스턴스 필드는 되도록 public이 아니어야 한다.<br>\n필드가 가변 객체를 참조하거나, final이 아닌 인스턴스 필드를 public으로 선언하면 그 필드에 담을 수 있는 값을 제한할 힘을 잃게 된다.\n그 필드와 관련된 모든 것은 불변식을 보장할 수 없게 된다는 뜻이다.<br>\n여기에 더해, 필드가 수정될 때 (락 획득 같은) 다른 작업을 할 수 없게 되므로 public 가변 필드를 갖는 클래스는 일반적으로 스레드 안전하지 않다.</p>\n<p>정적 필드에서도 마찬가지이나, 상수라면 public static final 필드로 공개해도 좋다.<br>\n관례상 이런 상수의 이름은 대문자 알파벳으로 쓰며, 각 단어 사이에 밑줄(_)을 넣는다.<br>\n이런 필드는 반드시 기본 타입 값이나 불변 객체를 잠조해야 한다. 가변 객체를 참조한다면 final이 아닌 필드에 적용되는 모든 불이익이 그대로 적용된다.</p>\n<p>길이가 0이 아닌 배열은 모두 변경 가능하니 주의하자.<br>\n따라서 클래스에서 public static final 배열 필드를 두거나 이 필드를 반환하는 접근자 메서드를 제공해서는 안 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 보안 허점이 숨어 있다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> VALUES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 필드나 접근자를 제공한다면 클라이언트에서 그 배열의 내용을 수정할 수 있게 된다.</p>\n<p>해결책은 두 가지다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> PRIVATE_VALUES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thing</span><span class=\"token punctuation\">></span></span> VALUES <span class=\"token operator\">=</span> \n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>PRIVATE_VALUES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>첫 번째 방법은 public 배열을 private으로 만들고 public 불변 리스트를 추가하는 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> PRIVATE_VALUES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> PRIVATE_VALUES<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 번째는 배열을 private으로 만들고 그 복사본을 반환하는 public 메서드를 추가하는 방법(방어적 복사).</p>\n<br/>\n<h2 id=\"모듈-시스템에서의-두-가지-암묵적-접근-수준\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C%EC%9D%98-%EB%91%90-%EA%B0%80%EC%A7%80-%EC%95%94%EB%AC%B5%EC%A0%81-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80\" aria-label=\"모듈 시스템에서의 두 가지 암묵적 접근 수준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 시스템에서의 두 가지 암묵적 접근 수준</h2>\n<p>자바 9에서는 모듈 시스템이라는 개념이 도입되면서 두 가지 암묵적 접근 수준이 추가되었다.</p>\n<p>패키지가 클래스들의 묶음이듯, 모듈은 패키지들의 묶음이다.<br>\n모듈은 자신에 속하는 패키지 중 공개(export)할 것들을 (관례상 module-info.java 파일에) 선언한다.<br>\nprotected 혹은 public 멤버라도 해당 패키지를 공개하지 않았다면 모듈 외부에서는 접근할 수 없다.</p>\n<p>모듈 시스템을 활용하면 클래스를 외부에 공개하지 않으면서도 같은 모듈을 이루는 패키지에서는 자유롭게 공유할 수 있다.</p>\n<p>두 가지 암묵적 접근 수준은 이 숨겨진 패키지 안에 있는 public 클래스의 public 혹은 protected 멤버와 관련이 있음.\n암묵적 접근 수준들은 각각 public 수준과 protected 수준과 같으나, 그 효과가 모듈 내부로 한정되는 변종인 것.</p>\n<p>모듈에 적용되는 새로운 두 접근 수준은 상당히 주의해서 사용해야 한다.<br>\n모듈의 JAR 파일을 자신의 모듈 경로가 아닌 애플리케이션의 클래스패스(classpath)에 두면 그 모듈 안의 모든 패키지는 마치 모듈이 없는 것처럼 행동한다.<br>\n즉, 모듈이 공개했는지 여부와 상관없이 public 클래스가 선언한 모든 public 혹은 protected 멤버를 모듈 밖에서도 접근할 수 있게 된다.</p>\n<p>새로 등장한 이 접근 수준을 적극 활용한 대표적인 예가 바로 JDK 자체다.<br>\n자바 라이브러리에서 공개하지 않은 패키지들은 해당 모듈 밖에서는 절대 접근할 수 없다.</p>\n<p>모듈은 여러 면에서 자바 프로그래밍에 영향을 준다.<br>\n모듈의 장점을 제대로 누리려면 해야 할 일이 많다.<br>\n먼저 패키지들을 모듈 단위로 묶고, 모듈 선언에 패키지들의 모든 의존성을 명시한다.\n그런 다음 소스 트리를 재배치하고, 모듈 안으로부터 (모듈 시스템을 적용하지 않는) 일반 패키지로의 모든 접근에 특별한 조치를 취해야 한다.<br>\nJDK 외에도 모듈 개념이 널리 받아들여질지 예측하기는 아직 이른 감이 있다.<br>\n꼭 필요한 경우가 아니라면 당분간은 사용하지 않는 게 좋을 것 같다.</p>\n<br/>\n<h2 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h2>\n<ul>\n<li>프로그램 요소의 접근성은 가능한 한 최소한으로 하라.</li>\n<li>\n<p>꼭 필요한 것만 골라 최소한의 public API를 설계하자.</p>\n<ul>\n<li>그 외에는 클래스, 인터페이스, 멤버가 의도치 않게 API로 공개되는 일이 없도록 해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>public 클래스는 상수용 public static final 필드 외에는 어떠한 public 필드도 가져서는 안 된다.</p>\n<ul>\n<li>public static final 필드가 참조하는 객체가 불변인지 확인하라.</li>\n</ul>\n</li>\n</ul>","excerpt":"잘 설계된 컴포넌트는 모든 내부 구현을 완벽히 숨겨, 구현과 API를 깔끔히 분리한다. 오직 API를 통해서만 다른 컴포넌트와 소통하며 서로의 내부 동작 방식에는 전혀 개의치 않는다. 정보 은닉, 혹은 캡슐화라고 하는 이 개념은 소프트웨어 설계의 근…","tableOfContents":"<ul>\n<li><a href=\"/effective-java-item15/#%EC%A0%95%EB%B3%B4-%EC%9D%80%EB%8B%89%EC%9D%98-%EC%9E%A5%EC%A0%90\">정보 은닉의 장점</a></li>\n<li><a href=\"/effective-java-item15/#%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C%EC%9D%98-%EC%A0%95%EB%B3%B4-%EC%9D%80%EB%8B%89\">자바에서의 정보 은닉</a></li>\n<li><a href=\"/effective-java-item15/#%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80-%EB%84%A4-%EA%B0%80%EC%A7%80\">접근 수준 네 가지</a></li>\n<li><a href=\"/effective-java-item15/#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC-%EB%B2%94%EC%9C%84\">테스트에서 접근 범위</a></li>\n<li><a href=\"/effective-java-item15/#public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-public-%ED%95%84%EB%93%9C\">public 클래스의 public 필드</a></li>\n<li><a href=\"/effective-java-item15/#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C%EC%9D%98-%EB%91%90-%EA%B0%80%EC%A7%80-%EC%95%94%EB%AC%B5%EC%A0%81-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80\">모듈 시스템에서의 두 가지 암묵적 접근 수준</a></li>\n<li><a href=\"/effective-java-item15/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","fields":{"slug":"/effective-java-item15/"},"frontmatter":{"title":"[이펙티브 자바] 15. 클래스와 멤버의 접근 권한을 최소화하라","date":"Dec 28, 2021","tags":["java","book"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/effective-java-item15/","series":[],"lastmod":"2021-12-28"}},"staticQueryHashes":["2027115977","694178885"]}