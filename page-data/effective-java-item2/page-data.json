{"componentChunkName":"component---src-templates-post-tsx","path":"/effective-java-item2/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li>\n<p>정적 팩터리와 생성자에는 똑같은 제약이 있다.</p>\n<ul>\n<li>선택적 매개변수가 많을때 적절히 대응하기 어렵다는 점!</li>\n</ul>\n</li>\n<li>필드에 변수가 많이 있을 때 이런 클래스용 생성자 혹은 정적 팩터리는 어떤 모습일까?</li>\n<li>3가지 방법을 사용한 모습이 있겠다.</li>\n<li>\n<p>점층적 생성자 패턴(telescoping constructor pattern)</p>\n<ul>\n<li>필수 매개변수 하나만 받는 생성자, 필수 매개변수와 선택 매개변수 1개를 받는 생성자, 2개까지 받는 생성자 .... 이런 식으로 선택 매개변수를 전부 다 받는 생성자까지 늘려가는 방식이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (mL, 1회 제공량)     필수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// (회, 총 n회 제공량)  필수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// (1회 제공량당)       선택</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// (g/1회 제공량)       선택</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// (mg/1회 제공량)      선택</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> carbohydrate<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (g/1회 제공량)       선택</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>servingSize<span class=\"token punctuation\">,</span> servings<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>servingSize<span class=\"token punctuation\">,</span> servings<span class=\"token punctuation\">,</span> calories<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>servingSize<span class=\"token punctuation\">,</span> servings<span class=\"token punctuation\">,</span> calories<span class=\"token punctuation\">,</span> fat<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>servingSize<span class=\"token punctuation\">,</span> servings<span class=\"token punctuation\">,</span> calories<span class=\"token punctuation\">,</span> fat<span class=\"token punctuation\">,</span> sodium<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> carbohydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servingSize  <span class=\"token operator\">=</span> servingSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servings     <span class=\"token operator\">=</span> servings<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>calories     <span class=\"token operator\">=</span> calories<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fat          <span class=\"token operator\">=</span> fat<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sodium       <span class=\"token operator\">=</span> sodium<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>carbohydrate <span class=\"token operator\">=</span> carbohydrate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>매개변수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다는 단점이 있다.</li>\n</ul>\n</li>\n<li>\n<p>자바빈즈 패턴(JavaBeans pattern)</p>\n<ul>\n<li>\n<p>JavaBeans란 데이터를 표현하기 위한 Java 클래스를 만들 때의 규약으로 아래의 규약을 지킨 Java 클래스를 JavaBeans라고 부른다.</p>\n<ul>\n<li>모든 클래스의 프로퍼티는 private이며 getter, setter 메서드로 제어한다.</li>\n<li>인자가 없는 public 생성자가 있어야 한다.</li>\n<li>Serializable 인터페이스를 구현해야 한다.</li>\n</ul>\n</li>\n<li>즉, 매개변수가 없는 생성자로 객체를 만든 후, 세터(setter) 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다.</li>\n<li>점층적 생성자 패턴에 비해 코드가 길어지긴 했지만, 인스턴스를 만들기 쉽고 그 결과 더 읽기 쉬운 코드가 되었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 매개변수들은 (기본값이 있다면) 기본값으로 초기화된다.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servingSize  <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servings     <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories     <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat          <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium       <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> carbohydrate <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Setters</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setServingSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> servingSize <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setServings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> servings <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCalories</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> calories <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">{</span> fat <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSodium</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">{</span> sodium <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCarbohydrate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> carbohydrate <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NutritionFacts</span> cocaCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cocaCola<span class=\"token punctuation\">.</span><span class=\"token function\">setServingSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cocaCola<span class=\"token punctuation\">.</span><span class=\"token function\">setServings</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cocaCola<span class=\"token punctuation\">.</span><span class=\"token function\">setCalories</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cocaCola<span class=\"token punctuation\">.</span><span class=\"token function\">setSodium</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cocaCola<span class=\"token punctuation\">.</span><span class=\"token function\">setCarbohydrate</span><span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>하지만 심각한 단점이 있다.\n자바빈즈 패턴에서는 객체 하나를 만들려면 메서드를 여러 개 호출해야 하고, 객체가 완전히 생성되기 전까지 일관성(consistency)이 무너진 상태에 놓이게 된다.\n따라서 클래스를 불변으로 만들수 없으며 스레드 안전성을 얻으려면 프로그래머가 추가 작업을 해줘야만 한다.</li>\n</ul>\n</li>\n<li>\n<p>빌더 패턴(Builder pattern)</p>\n<ul>\n<li>점층적 생성자 패턴의 안전성과 자바빈드 패턴의 가독성을 겸비했다.</li>\n<li>클라이언트는 필요한 객체를 직접 만드는 대신, 필수 매개변수만으로 생성자(혹은 정적 팩터리)를 호출해 빌더 객체를 얻는다.\n그런 다음 빌더 객체가 제공하는 일종의 세터 메서드들로 원하는 선택 매개변수들을 설정한다.\n마지막으로 매개변수가 없는 build 메서드를 호출해 드디어 우리에게 필요한 (보통은 불변인) 객체를 얻는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> carbohydrate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 필수 매개변수</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 선택 매개변수 - 기본값으로 초기화한다.</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories      <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat           <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium        <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> carbohydrate  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servingSize <span class=\"token operator\">=</span> servingSize<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servings    <span class=\"token operator\">=</span> servings<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">calories</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span> calories <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">fat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span> fat <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>           <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">sodium</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span> sodium <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">carbohydrate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span> carbohydrate <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        servingSize  <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>servingSize<span class=\"token punctuation\">;</span>\n        servings     <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>servings<span class=\"token punctuation\">;</span>\n        calories     <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>calories<span class=\"token punctuation\">;</span>\n        fat          <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>fat<span class=\"token punctuation\">;</span>\n        sodium       <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sodium<span class=\"token punctuation\">;</span>\n        carbohydrate <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>carbohydrate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NutritionFacts</span> cocaCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">calories</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sodium</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">carbohydrate</span><span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>빌더 패턴은 (파이썬과 스칼라에 있는) 명명된 선택적 매개변수를 흉내 낸 것이다.</li>\n<li>\n<p>잘못된 매개변수를 일찍 발견하려면 빌더의 생성자와 메서드에서 입력 매개변수를 검사하고, build 메서드가 호출하는 생성자에서 여러 매개변수에 걸친 불변식을 검사하자.</p>\n<ul>\n<li>불변(immutable 혹은 immutability) - 어떠한 변경도 허용하지 않는다는 뜻. 주로 변경을 허용하는 가변 객체와 구분하는 용도로 쓰임.</li>\n<li>불변식(invariant) - 프로그램이 실행되는 동안, 혹은 정해진 기간 동안 반드시 만족해야 하는 조건을 말함. 즉, 변경을 허용할 수 있으나 주어진 조건 내에서만 허용한다는 뜻.</li>\n<li>가변 객체에도 불변식은 존재할 수 있으며, 넓게 보면 불변은 불변식의 극단적인 예라 할 수 있음.</li>\n</ul>\n</li>\n<li>\n<p>그리고 빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 참고: 여기서 사용한 '시뮬레이트한 셀프 타입(simulated self-type)' 관용구는</span>\n<span class=\"token comment\">// 빌더뿐 아니라 임의의 유동적인 계층구조를 허용한다.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span> HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">,</span> PEPPER<span class=\"token punctuation\">,</span> SAUSAGE <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            toppings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 하위 클래스는 이 메서드를 재정의(overriding)하여</span>\n        <span class=\"token comment\">// \"this\"를 반환하도록 해야 한다.</span>\n\t\t\t\t<span class=\"token comment\">// 하위 클래스에서는 형변환하지 않고도 메서드 연쇄를 지원할 수 있음.</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아이템 50 참조</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NyPizza</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Size</span> <span class=\"token punctuation\">{</span> SMALL<span class=\"token punctuation\">,</span> MEDIUM<span class=\"token punctuation\">,</span> LARGE <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">NyPizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NyPizza</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">NyPizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calzone</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> sauceInside<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> sauceInside <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">sauceInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sauceInside <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Calzone</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calzone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Calzone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sauceInside <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sauceInside<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>빌더 패턴은 상당히 유연하다.</p>\n<ul>\n<li>빌더 하나로 여러 객체를 순회하면서 만들 수 있고, 빌더에 넘기는 매개변수에 따라 다른 객체를 만들 수도 있다.</li>\n<li>객체에게 부여되는 일련번호와 같은 특정 필드는 빌더가 알아서 채우도록 할 수도 있다.</li>\n</ul>\n</li>\n<li>\n<p>단, 장점만 있는 것은 아니다.</p>\n<ul>\n<li>객체를 만들려면, 그에 앞서 빌더부터 만들어야한다.</li>\n<li>빌더 생성 비용이 크지는 않지만 성능에 민감한 상황에서는 문제가 될 수 있다.</li>\n<li>매개변수가 4개 이상은 되어야 값어치를 한다.</li>\n<li>하지만 api는 시간이 지날수록 매개변수가 많아지는 경향이 있음을 명시하자!</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"핵심정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\" aria-label=\"핵심정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심정리</h2>\n<ul>\n<li>생성자나 정적 팩터리가 처리해야 할 매개변수가 많다면 빌더 패턴을 선택하는게 더 낫다!</li>\n</ul>\n<h2 id=\"느낀-점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80-%EC%A0%90\" aria-label=\"느낀 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀 점</h2>\n<ul>\n<li>짱 긴 생성자나 setter 범벅인 코드에 비해서 빌더는 깔끔하고 편하다.\n특히 롬복을 더한다면..ㅋㅋ;;\n그렇다면 무조건적인 빌더 사용이 좋을까? 책에서는 매개변수가 많아지는 경향이 있기에\n애초에 빌더 사용하는 거도 좋은 방법이라곤 하지만 직접 빌더를 만들어서 사용하려면\n그거도 비용이기 때문에 고민해봐야 할 것 같다.</li>\n</ul>","excerpt":"정적 팩터리와 생성자에는 똑같은 제약이 있다. 선택적 매개변수가 많을때 적절히 대응하기 어렵다는 점! 필드에 변수가 많이 있을 때 이런 클래스용 생성자 혹은 정적 팩터리는 어떤 모습일까? 3가지 방법을 사용한 모습이 있겠다. 점층적 생성자 패턴(te…","tableOfContents":"<ul>\n<li><a href=\"/effective-java-item2/#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\">핵심정리</a></li>\n<li><a href=\"/effective-java-item2/#%EB%8A%90%EB%82%80-%EC%A0%90\">느낀 점</a></li>\n</ul>","fields":{"slug":"/effective-java-item2/"},"frontmatter":{"title":"[이펙티브 자바] 2. 생성자에 매개변수가 많다면 빌더를 고려하라","date":"Dec 13, 2021","tags":["java","book"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/effective-java-item2/","series":[],"lastmod":"2021-12-13"}},"staticQueryHashes":["2027115977","694178885"]}