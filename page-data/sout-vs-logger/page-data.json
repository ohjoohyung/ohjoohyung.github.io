{"componentChunkName":"component---src-templates-post-tsx","path":"/sout-vs-logger/","result":{"data":{"markdownRemark":{"html":"<p>보통 로깅을 위해서 System.out.println() 보다는 logback 이나 log4j 같은 로깅 프레임워크를 사용하는 것이 좋다고 한다.</p>\n<p>로깅 프레임워크를 사용하면 로깅 레벨을 설정할 수 있다는 점이 좋다고는 알고 있지만 성능상으로도 더 좋다고 하는데 그게 진짜일까?</p>\n<p>둘 다 입출력을 위해 i/o 작업이 발생하는데 왜 System.out.println()이 성능상 떨어진다고 할까? 한번 알아보도록 하자.</p>\n<hr>\n<h2 id=\"systemoutprintln\" style=\"position:relative;\"><a href=\"#systemoutprintln\" aria-label=\"systemoutprintln permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.out.println()</h2>\n<ul>\n<li>System.out.println 은 정확히 코드를 열어보게 되면\nSystem이라는 final 클래스에 있는 out이라는 변수명을 가진 PrintStream 객체의 println 이라는 메소드를 뜻한다.</li>\n<li>println이라는 메소드는 오버로딩이 많이 되어있는 메소드인데 보는바와 같이 동기화를 위해 synchronized 키워드를 많이 사용을 하고 라인 단위로 flush를 한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/145754156-4426b0ec-dbb9-4acf-a5f5-8d28afa567ef.png\" alt=\"Untitled (25)\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/145754160-44600f2a-2b96-4a21-ada3-90c3fa2843c6.png\" alt=\"Untitled (26)\"></p>\n<ul>\n<li>이는 곧 동기화를 위해 오버헤드가 많이 발생한다는 뜻이다.\n즉 작업이 순차적으로 진행되어야 하기에 콘솔에 출력을 완료할 때까지 다음 작업은 block된 상태로 대기하고 있어야한다.</li>\n</ul>\n<br/>\n<h2 id=\"logger\" style=\"position:relative;\"><a href=\"#logger\" aria-label=\"logger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logger</h2>\n<ul>\n<li>logger로 사용되는 다양한 로깅 프레임워크가 존재한다. 기본적으로 SLF4J라는 다양한 로깅 프레임워크들에 대한 공용 인터페이스(Facade)가 존재하고 이들의 구현체인 log4j, logback, log4j2 등의 로깅 프레임워크가 존재한다.</li>\n<li>예시로 들 것은 logback이며 logger를 사용하여 콘솔에 로그를 출력하기로 했다.</li>\n<li>logback에서는 콘솔에 출력하기 위해 ConsoleAppender를 사용하게 되는데 해당 클래스의 모습이다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/145754208-5d07a394-f1a4-4aa7-bea1-7dc71fd8aa14.png\" alt=\"Untitled (27)\"></p>\n<ul>\n<li>근데 뭔가 이상하지 않은가? 해당 클래스의 주석에도 그렇고 공식 문서에도 그렇고 콘솔에 출력하기 위해 기본적으로 System.out을 사용한다고 적혀있다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/62014888/145754215-83bd9002-a633-4b34-bab1-0ccffccb7f1e.png\" alt=\"Untitled (28)\"></p>\n<ul>\n<li>실제로 ConsoleTarget이라는 enum도 살펴보면 System.out.write를 사용하는 모습을 볼 수 있다.</li>\n<li>이걸 보고 \"System.out.println()을 사용하는 것은 logger를 사용해 로깅하는 것에 비해 성능상 좋지 않아!\" 라고 무조건적으로 생각하는 것은 조금 잘못되었다라는 것을 알게 되었다.</li>\n<li>결국은 둘 다 System.out을 사용하여 i/o 작업이 발생하는 것이며 println의 경우 synchronized 키워드가 더 붙여져 있는 것일뿐 성능상으로 크게 차이가 없다고 추측이 된다.</li>\n<li>실제로 for문으로 출력 테스트를 해보았을 때 logger를 사용한 출력 시간이 더 오래걸렸다.</li>\n<li>\n<p>그렇다면 왜 성능에 관해서 이야기가 나오는 걸까?</p>\n<ul>\n<li>결론적으로 비동기 로깅을 사용하면 성능이 향상된다.</li>\n<li>특히 파일로 로그를 남길 때 비동기 로깅을 적용시킬 수가 있는데 적용하게 되면 로그 발생과 로그 쓰기를 분리시키기에 로깅 메소드를 호출하는 시점에 i/o 작업이 바로 수행되지 않아 성능이 향상된다.</li>\n</ul>\n</li>\n<li>Baeldung 블로그나 스택오버플로우를 검색해봐도 System.out.println() vs logger에서 성능 이야기는 전혀 나오지 않았다. 나오더라도 비동기와 같이 나오는 경우만 볼 수 있었다.</li>\n</ul>\n<br/>\n<h2 id=\"그렇다면-언제-무엇을-쓸까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%93%B8%EA%B9%8C\" aria-label=\"그렇다면 언제 무엇을 쓸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 언제 무엇을 쓸까?</h2>\n<ul>\n<li>당연히 프로젝트를 진행하는 상황이라면 디버깅을 위해서 또는 로그를 남기기 위해서 logger를 사용해야한다.</li>\n<li>System.out.println()은 사용하긴 편하나 콘솔에만 출력이 가능하고 날짜, 시간을 출력하지 않아 기록을 위한 로그용으로 불편하다.\n또한 출력되는 메시지를 제어할 수 없다.</li>\n<li>logger는 로깅 레벨을 설정하여 필요한 로그만 출력할 수 있다.\n또한 로그 내역을 별도의 파일에 저장할 수 있다. 파일로 저장할 경우 프레임워크에 의해 파일 유지 기간, 용량 등도 설정이 가능하여 자동화된 관리가 가능하다.\n원하는 패턴으로 출력이 되도록 설정할 수도 있다.</li>\n<li>System.out.println()을 사용하여 디버깅하는 습관을 들이게 되면 프로젝트를 진행하다 깜빡하고 코드를 삭제하지 못한 채로 운영 서버 코드로 반영되는 경우도 있고하니 logger를 사용하여 디버깅하는 습관을 들이도록 하자!</li>\n</ul>\n<br/>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://lob-dev.tistory.com/entry/Logging-slf4j-Logback-Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://lob-dev.tistory.com/entry/Logging-slf4j-Logback-Framework</a></li>\n<li><a href=\"https://ckddn9496.tistory.com/81?category=428336\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ckddn9496.tistory.com/81?category=428336</a></li>\n<li><a href=\"https://stackoverflow.com/questions/31869391/what-is-the-difference-between-java-logger-and-system-out-println\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/31869391/what-is-the-difference-between-java-logger-and-system-out-println</a></li>\n<li><a href=\"https://www.baeldung.com/java-system-out-println-vs-loggers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-system-out-println-vs-loggers</a></li>\n<li><a href=\"https://xlffm3.github.io/spring%20&#x26;%20spring%20boot/async-logger-performance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xlffm3.github.io/spring &#x26; spring boot/async-logger-performance/</a></li>\n</ul>","excerpt":"보통 로깅을 위해서 System.out.println() 보다는 logback 이나 log4j 같은 로깅 프레임워크를 사용하는 것이 좋다고 한다. 로깅 프레임워크를 사용하면 로깅 레벨을 설정할 수 있다는 점이 좋다고는 알고 있지만 성능상으로도 더 좋…","tableOfContents":"<ul>\n<li><a href=\"/sout-vs-logger/#systemoutprintln\">System.out.println()</a></li>\n<li><a href=\"/sout-vs-logger/#logger\">Logger</a></li>\n<li><a href=\"/sout-vs-logger/#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B8%EC%A0%9C-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%93%B8%EA%B9%8C\">그렇다면 언제 무엇을 쓸까?</a></li>\n<li><a href=\"/sout-vs-logger/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","fields":{"slug":"/sout-vs-logger/"},"frontmatter":{"title":"System.out.println() vs Logger","date":"Dec 01, 2021","tags":["java","logger"],"keywords":["Dev.Oh","JooHyung Oh"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/sout-vs-logger/","series":[],"lastmod":"2021-12-01"}},"staticQueryHashes":["2027115977","694178885"]}